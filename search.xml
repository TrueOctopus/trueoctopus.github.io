<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis缓存穿透和雪崩</title>
    <url>/2023/03/26/Redis/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h2><div class="note info">
            <p>缓存穿透的概念：用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透</p>
          </div>

<a id="more"></a>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h3><ul>
<li><strong>布隆过滤器</strong></li>
</ul>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p>
<p><img src="https://i.imgtg.com/2023/03/26/jiclc.png" alt="jiclc.png"></p>
<ul>
<li><strong>缓存空对象</strong></li>
</ul>
<p>当存储层不命中后，即使返回空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p>
<p><img src="https://i.imgtg.com/2023/03/26/jisTr.png" alt="jisTr.png"></p>
<p><strong>存在的问题</strong></p>
<p>1.需要更多空间存储空键</p>
<p>2.即使设置了过期时间，但是和存储层的时间窗口不一致，不能保持一致性</p>
<br>

<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h2><div class="note info">
            <p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。 </p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访 问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>
          </div>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h3><ul>
<li><p><strong>设置热点数据永不过期</strong></p>
</li>
<li><p><strong>加互斥锁</strong></p>
</li>
</ul>
<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
<br>

<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h2><p>缓存集中失效，redis宕机</p>
<p><img src="https://i.imgtg.com/2023/03/26/jiYcG.png" alt="jiYcG.png"></p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h3><ul>
<li><strong>redis高可用</strong></li>
</ul>
<p>搭建集群，异地多活</p>
<ul>
<li><strong>限流降级</strong></li>
</ul>
<p>缓存失效后，通过加锁或者队列来控制数据库写缓存的线程数量</p>
<ul>
<li><strong>数据预热</strong></li>
</ul>
<p>正式部署前预先访问一遍可能的数据，尽可能手动触发加载缓存，设置不同的缓存时间，让缓存失效的时间点尽量均匀</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从复制与哨兵模式</title>
    <url>/2023/03/25/Redis/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div class="note info">
            <p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点 (master/leader)，后者称为从节点(slave/follower)</p><p>数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Slave 以读为主</p><p>主从复制，读写分离，实际大多数情况都是读取，这样可以缓解服务器压力</p>
          </div>

<h3 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a><strong>主要作用</strong></h3><ul>
<li><strong>数据冗余：</strong> 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li><strong>故障恢复：</strong> 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余</li>
<li><strong>负载均衡：</strong> 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量</li>
<li><strong>高可用(集群)基石：</strong> 除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础</li>
</ul>
<a id="more"></a>

<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h3><p>只用配置从库，不用配置主库，默认都是主节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication   # 查看信息</span><br><span class="line"># Replication</span><br><span class="line">role:master  # 角色</span><br><span class="line">connected_slaves:0  # 从机数量</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:57314a922319a199124b949d7889231dd2f8ffdc</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<p>修改配置文件：端口 log文件名 rdb文件名 pid文件名</p>
<p><strong>配置从库</strong> </p>
<p>认定一个为主机，只需配置从机认主机就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379   # 主机端口 重启后变回主机</span><br></pre></td></tr></table></figure>

<p>配置文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379  # 主机端口 重启后仍是从机</span><br></pre></td></tr></table></figure>

<p><strong>在docker下部署主从复制</strong></p>
<p>将配置文件下载到宿主机，通过路径映射至docker容器，并用配置文件启动容器</p>
<p>1.主机配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建容器</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 -d --name redis-master -v D:&#x2F;DockerConf&#x2F;redis&#x2F;redis79.conf:&#x2F;redis.conf --restart&#x3D;always redis redis-server &#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置文件</span><br><span class="line"></span><br><span class="line">bind 0.0.0.0   # 允许外部访问</span><br><span class="line">protected-mode no  # 关闭保护模式</span><br></pre></td></tr></table></figure>

<p>2.从机配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询主机内部ip</span><br><span class="line"></span><br><span class="line">docker inspect redis-master</span><br><span class="line"></span><br><span class="line">&quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">&quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">&quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">&quot;IPAddress&quot;: &quot;172.17.0.4&quot;,</span><br><span class="line">&quot;IPPrefixLen&quot;: 16,</span><br><span class="line">&quot;IPv6Gateway&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建容器</span><br><span class="line"></span><br><span class="line">docker run -p 6380:6380 -d --name redis-slave-80 -v D:&#x2F;DockerConf&#x2F;redis&#x2F;redis80.conf:&#x2F;redis.conf --restart&#x3D;always redis redis-server &#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置文件</span><br><span class="line"></span><br><span class="line">replicaof 172.17.0.1 6379  # 主机的ip与端口号</span><br><span class="line">replica-read-only yes      # 从机只写模式</span><br></pre></td></tr></table></figure>

<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a><strong>复制原理</strong></h3><p>Slave 启动成功连接到 master 后会发送一个sync命令</p>
<p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步</p>
<p><strong>全量复制：</strong> slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</p>
<p><strong>增量复制：</strong> Master 继续将新的所有收集到的修改命令依次传给slave，完成同步但是只要是重新连接master，一次完全同步（全量复制）将被自动执行</p>
<h3 id="链路链接"><a href="#链路链接" class="headerlink" title="链路链接"></a><strong>链路链接</strong></h3><p>上一个M链接下一个S，从机仍可以获取，但是中间一个仍是无法写入，但可以缓解主机的压力</p>
<p><img src="https://i.imgtg.com/2023/03/25/jTlMP.png" alt="jTlMP.png"></p>
<h3 id="从机变主（手动设置）"><a href="#从机变主（手动设置）" class="headerlink" title="从机变主（手动设置）"></a><strong>从机变主（手动设置）</strong></h3><p>如果主机断开了，可以手动变为主机，其余从机可以手动连接新的主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure>

<p>如果原来的主机复活，从机也还是主机，需要重新配置</p>
<h3 id="哨兵模式（自动配置）"><a href="#哨兵模式（自动配置）" class="headerlink" title="哨兵模式（自动配置）"></a><strong>哨兵模式（自动配置）</strong></h3><div class="note info">
            <p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个<strong>独立的进程</strong>，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</p>
          </div>

<p><img src="https://i.imgtg.com/2023/03/25/jT8zB.png" alt="jT8zB.png"></p>
<p><strong>哨兵功能</strong></p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服 务器，修改配置文件，让它们切换主机</li>
</ul>
<p><strong>多哨兵模式</strong></p>
<p>防止哨兵进程崩溃导致主从切换失败</p>
<p><img src="https://i.imgtg.com/2023/03/25/jTwcN.png" alt="jTwcN.png"></p>
<div class="note info">
            <h3 id="切换逻辑"><a href="#切换逻辑" class="headerlink" title="切换逻辑"></a><strong>切换逻辑</strong></h3><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong></p><p>当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover（故障转移）操作</p><p>切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong></p><p>如果主机回来了，只能归并到新的主机下</p>
          </div>

<p><strong>配置哨兵</strong></p>
<p>1.配置文件senticel.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor redis-master 172.17.0.1 6379 1   # 1表示主机挂了后投票机制</span><br></pre></td></tr></table></figure>

<p>2.启动哨兵</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-sentinel senticel.conf</span><br></pre></td></tr></table></figure>

<p><strong>配置说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Example sentinel.conf </span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379 </span><br><span class="line">port 26379 </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel的工作目录 </span><br><span class="line">dir &#x2F;tmp </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name 可以自己命名的主节点名字，只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。 </span><br><span class="line"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了 </span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都 要提供密码 </span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码 </span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd </span><br><span class="line"></span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒 </span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000 </span><br><span class="line"></span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行同步， </span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。 </span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。 </span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确 master那里同步数据时。 </span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。 </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。</span><br><span class="line">不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了 </span><br><span class="line"># 默认三分钟 </span><br><span class="line"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"># SCRIPTS EXECUTION </span><br><span class="line"></span><br><span class="line">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮 件通知相关人员。 </span><br><span class="line">#对于脚本的运行结果有以下规则： </span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10 </span><br><span class="line">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。 </span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。 </span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。 </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本</span><br><span class="line">这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。</span><br><span class="line">调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。</span><br><span class="line">如果sentinel.co nf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。 </span><br><span class="line"></span><br><span class="line">#通知脚本 </span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">sentinel notification-script mymaster &#x2F;var&#x2F;redis&#x2F;notify.sh</span><br><span class="line"></span><br><span class="line"># 客户端重新配置主节点参数脚本 </span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master 地址已经发生改变的信息。 </span><br><span class="line"># 以下参数将会在调用脚本时传给脚本: </span><br><span class="line"># </span><br><span class="line"># 目前总是“failover”, </span><br><span class="line"># 是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的 slave)通信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。 </span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">sentinel client-reconfig-script mymaster &#x2F;var&#x2F;redis&#x2F;reconfig.sh</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong></p>
<ul>
<li>哨兵集群模式是基于主从模式的，所有主从的优点，哨兵模式同样具有</li>
<li>主从可以切换，故障可以转移，系统可用性更好</li>
<li>哨兵模式是主从模式的升级，系统更健壮，可用性更高</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂 </li>
<li>实现哨兵模式的配置也不简单，甚至可以说有些繁琐</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis订阅发布</title>
    <url>/2023/03/25/Redis/Redis%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<div class="note info">
            <p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 Redis 客户端可以订阅任意数量的频道。</p>
          </div>

<p>订阅/发布消息图：</p>
<ul>
<li>消息发送者</li>
<li>频道</li>
<li>消息订阅者</li>
</ul>
<p><img src="https://i.imgtg.com/2023/03/25/jBISq.png" alt="jBISq.png"></p>
<a id="more"></a>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h3><p>订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscribe [channel]</span><br></pre></td></tr></table></figure>

<p>发送消息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">publish [channel] [message]</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong> redis会维护一个字典，键值就是频道，每个键值对应一个链表存消息信息</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h3><ul>
<li>实时聊天（聊天室）</li>
<li>实时消息系统（网站推送）</li>
<li>订阅关注</li>
<li>复杂用消息中间件（MQ）</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化</title>
    <url>/2023/03/24/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<div class="note info">
            <p>Redis是内存数据库，如果不将内存中的数据进行持久化，一旦服务器进程关闭，其数据库状态也会被刷新，则会丢失相关的数据，所以需要进行持久化对数据做保存</p>
          </div>

<a id="more"></a>

<h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a><strong>RDB（Redis DataBase）</strong></h2><p>通过Snapshot快照进行持久化</p>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件</p>
<p>整个过程中，主进程是不进行任何IO操作的。 这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失</p>
<p><img src="https://i.imgtg.com/2023/03/24/9I2Os.png" alt="9I2Os.png"></p>
<p>在配置文件中的SNAPSHOTTING配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb      # 文件名</span><br><span class="line"></span><br><span class="line"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="line">#   * After 3600 seconds (an hour) if at least 1 change was performed</span><br><span class="line">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span><br><span class="line">#   * After 60 seconds if at least 10000 changes were performed</span><br><span class="line">#</span><br><span class="line"># You can set these explicitly by uncommenting the following line.</span><br><span class="line">#</span><br><span class="line"># save 3600 1 300 100 60 10000      # 持久化规则</span><br></pre></td></tr></table></figure>

<div class="note info">
            <h3 id="保存rdb触发机制"><a href="#保存rdb触发机制" class="headerlink" title="保存rdb触发机制"></a><strong>保存rdb触发机制</strong></h3><p>满足save规则<br>执行flushall<br>退出redis</p>
          </div>

<p>优点：</p>
<ul>
<li>适合大规模的数据恢复</li>
<li>对数据完整性要求不高</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要一定时间间隔进行操作，意外宕机最后一次修改则会丢失</li>
<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>
</ul>
<h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a><strong>AOF（Append Only File）</strong></h2><p>将所有命令都记录下来，恢复时则全部执行一遍（读取操作不记录）</p>
<p><img src="https://i.imgtg.com/2023/03/24/9IC9L.png" alt="9IC9L.png"></p>
<p>默认是不开启的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appenddirname &quot;appendonlydir&quot;</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<br>

<h3 id="重写规则"><a href="#重写规则" class="headerlink" title="重写规则"></a><strong>重写规则</strong></h3><p>当aof文件的大小超过设定值时，Redis就会启动aof文件的内容压缩，只保留可以恢复数据的最小指令集</p>
<p><strong>重写原理：</strong> </p>
<p>aof文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再rename），遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件</p>
<p><strong>触发机制：</strong></p>
<p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的已被且文件大于64M的触发。</p>
<br>

<h3 id="校验机制"><a href="#校验机制" class="headerlink" title="校验机制"></a><strong>校验机制</strong></h3><p>如果aof文件错误则启动不了redis，需要修复文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix 文件名</span><br></pre></td></tr></table></figure>

<p>如果文件正常，重启就能恢复</p>
<p>优点：</p>
<ul>
<li>每一次修改都同步，文件完整性更好</li>
<li>每秒同步一次可能会丢失1s的数据</li>
<li>从不同步效率是最高的</li>
</ul>
<p>缺点：</p>
<ul>
<li>相对于数据文件来说，aof远大于rdb，修复速度也慢于rdb</li>
<li>运行效率低</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis配置详解</title>
    <url>/2023/03/24/Redis/Redis%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="获取配置文件"><a href="#获取配置文件" class="headerlink" title="获取配置文件"></a>获取配置文件</h3><p>docker配置文件需要下载至对应位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;redis &#x2F;&#x2F;进入目录 </span><br><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;redis-stable&#x2F;redis.conf &#x2F;&#x2F;下载redis配置文件 </span><br><span class="line">vim redis.conf &#x2F;&#x2F;修改配置文件</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><ul>
<li>对大小写不敏感</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k &#x3D;&gt; 1000 bytes</span><br><span class="line"># 1kb &#x3D;&gt; 1024 bytes</span><br><span class="line"># 1m &#x3D;&gt; 1000000 bytes</span><br><span class="line"># 1mb &#x3D;&gt; 1024*1024 bytes</span><br><span class="line"># 1g &#x3D;&gt; 1000000000 bytes</span><br><span class="line"># 1gb &#x3D;&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br></pre></td></tr></table></figure>

<h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><ul>
<li>可以包含其他配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># include &#x2F;path&#x2F;to&#x2F;local.conf</span><br><span class="line"># include &#x2F;path&#x2F;to&#x2F;other.conf</span><br><span class="line"># include &#x2F;path&#x2F;to&#x2F;fragments&#x2F;*.conf</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 -::1   # 绑定的ip</span><br><span class="line">protected-mode yes    # 保护模式</span><br><span class="line">port 6379             # 端口</span><br></pre></td></tr></table></figure>

<h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize no     # 以守护进程的方式运行，默认no</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid   # 如果以后台方式运行，需要指定一个pid文件</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development&#x2F;testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important &#x2F; critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot;      # 日志文件位置名</span><br><span class="line"> </span><br><span class="line">databases 16    # 数据库数量</span><br><span class="line">always-show-logo no  # logo展示</span><br></pre></td></tr></table></figure>

<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><ul>
<li>持久化，在规定时间内执行了多少次则会持久化到文件</li>
<li>redis是内存数据库，如果没有持久化，断电丢失</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="line">#   * After 3600 seconds (an hour) if at least 1 change was performed</span><br><span class="line">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span><br><span class="line">#   * After 60 seconds if at least 10000 changes were performed</span><br><span class="line">#</span><br><span class="line"># You can set these explicitly by uncommenting the following line.</span><br><span class="line">#</span><br><span class="line"># save 3600 1 300 100 60 10000</span><br><span class="line"></span><br><span class="line"># 3600s内如果至少有一个key进行了修改则进行持久化操作</span><br><span class="line"># 300s内如果至少有100个key进行了修改则进行持久化操作</span><br><span class="line"># 60s内如果至少有10000个key进行了修改则进行持久化操作</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes   # 持久化出错是否继续进行</span><br><span class="line">rdbcompression yes        # 是否压缩rdb文件</span><br><span class="line">rdbchecksum yes           # 是否检验检查</span><br><span class="line">dir .&#x2F;                    # 保存文件位置</span><br></pre></td></tr></table></figure>

<h3 id="REPLICATION-主从复制"><a href="#REPLICATION-主从复制" class="headerlink" title="REPLICATION 主从复制"></a>REPLICATION 主从复制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;    # 配置主机ip端口</span><br><span class="line"># masterauth &lt;master-password&gt;         # 配置主机密码</span><br><span class="line">replica-read-only yes                  # 从机只读</span><br></pre></td></tr></table></figure>

<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># requirepass foobared    # 密码设置</span><br><span class="line"></span><br><span class="line"># 一般用命令行设置</span><br><span class="line"></span><br><span class="line">config get requirepass</span><br><span class="line"></span><br><span class="line">config set requirepass &quot;111111&quot;</span><br><span class="line"></span><br><span class="line">auth 111111</span><br></pre></td></tr></table></figure>

<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># maxclients 10000   # 链接最大客户端数量</span><br><span class="line"># maxmemory &lt;bytes&gt;  # 最大内存容量</span><br><span class="line"># maxmemory-policy noeviction  # 内存满了后的处理策略</span><br><span class="line"># 六种方式：</span><br><span class="line">	volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">	allkeys-lru ： 删除lru算法的key   </span><br><span class="line">	volatile-random：随机删除即将过期key   </span><br><span class="line">	allkeys-random：随机删除   </span><br><span class="line">	volatile-ttl ： 删除即将过期的   </span><br><span class="line">	noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure>

<h3 id="AOF模式"><a href="#AOF模式" class="headerlink" title="AOF模式"></a>AOF模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendonly no  # 默认不开启，默认使用rdb进行持久化</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;   # 文件名</span><br><span class="line"></span><br><span class="line"># appendfsync always      # 每次修改就会同步，消耗性能</span><br><span class="line">appendfsync everysec      # 每秒执行一次sync，可能会丢失这1s的数据</span><br><span class="line"># appendfsync no          # 不执行同步，交给操作系统会自动同步</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本使用</title>
    <url>/2023/03/23/Redis/Redis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a><strong>一、事务</strong></h2><p>事务的<strong>四个特性(ACID)</strong>：</p>
<ul>
<li><strong>原子性（Atomicity）：</strong> 指事务是一个不可分割的最小工作单位，事务中的操作只有都发生和都不发生两种情况（要么同时成功，要么同时失败）</li>
<li><strong>一致性（Consistency）：</strong> 事务必须使数据库从一个一致状态变换到另外一个一致状态</li>
<li><strong>隔离性（Isolation）：</strong> 一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</li>
<li><strong>持久性（Durability）：</strong> 一个事务一旦提交成功，它对数据库中数据的改变将是永久性的，接下来的其他操作或故障不应对其有任何影响</li>
</ul>
<div class="note info">
            <p><strong>Redis事务</strong>本质是一组命令的集合，顺序执行</p><p><strong>一次性、顺序性、排他性</strong>，执行一系列的命令</p><p>Redis单条命令是保证原子性，但是其事务<strong>不保证原子性</strong>，没有隔离级别的概念</p>
          </div>

<a id="more"></a>


<h3 id="redis的事务："><a href="#redis的事务：" class="headerlink" title="redis的事务："></a><strong>redis的事务：</strong></h3><ul>
<li>开启事务（multi）</li>
<li>命令入队（……）</li>
<li>执行事务（exec）</li>
<li>放弃事务（discard）</li>
</ul>
<h3 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a><strong>事务异常</strong></h3><ul>
<li><strong>编译型异常</strong>（代码有误）：队列中的命令全部不执行</li>
<li><strong>运行时异常</strong>（1/0）：其余命令正常执行，异常的命令抛出</li>
</ul>
<h3 id="监控-watch"><a href="#监控-watch" class="headerlink" title="监控 watch"></a><strong>监控 watch</strong></h3><ul>
<li><strong>乐观锁</strong><ul>
<li>不上锁，只对写上锁，更新时判断是否被修改</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
</li>
<li><strong>悲观锁</strong><ul>
<li>无论做什么都加锁</li>
<li>影响性能</li>
</ul>
</li>
</ul>
<br>

<ul>
<li><strong>watch</strong> 使用watch等效于redis的乐观锁操作</li>
<li><strong>unwatch</strong> 取消监控，解锁</li>
</ul>
<br>

<h2 id="二、Jedis"><a href="#二、Jedis" class="headerlink" title="二、Jedis"></a><strong>二、Jedis</strong></h2><div class="note info">
            <p>Jedis是java链接开发工具，使用java操作redis</p>
          </div>

<p><strong>导入对应的依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;redis.clients&#x2F;jedis --&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;  </span><br><span class="line">        &lt;version&gt;3.2.0&lt;&#x2F;version&gt;  </span><br><span class="line">    &lt;&#x2F;dependency&gt;    </span><br><span class="line">    &lt;dependency&gt;        </span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;  </span><br><span class="line">        &lt;version&gt;2.0.25&lt;&#x2F;version&gt;  </span><br><span class="line">    &lt;&#x2F;dependency&gt;  </span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<p><strong>测试链接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ping &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        Jedis jedis &#x3D; new Jedis(&quot;127.0.0.1&quot;,6379);    </span><br><span class="line">        &#x2F;&#x2F;查看服务是否运行  </span><br><span class="line">        System.out.println(jedis.ping());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>事务测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestMulti &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        &#x2F;&#x2F;创建客户端连接服务端，redis服务端需要被开启  </span><br><span class="line">        Jedis jedis &#x3D; new Jedis(&quot;127.0.0.1&quot;, 6379);  </span><br><span class="line">        jedis.flushDB();  </span><br><span class="line">  </span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();  </span><br><span class="line">        jsonObject.put(&quot;hello&quot;, &quot;world&quot;);  </span><br><span class="line">        jsonObject.put(&quot;name&quot;, &quot;java&quot;);  </span><br><span class="line">        &#x2F;&#x2F;开启事务  </span><br><span class="line">        Transaction multi &#x3D; jedis.multi();  </span><br><span class="line">        String result &#x3D; jsonObject.toJSONString();  </span><br><span class="line">        try&#123;  </span><br><span class="line">            &#x2F;&#x2F;向redis存入一条数据  </span><br><span class="line">            multi.set(&quot;json&quot;, result);  </span><br><span class="line">            &#x2F;&#x2F;再存入一条数据  </span><br><span class="line">            multi.set(&quot;json2&quot;, result);  </span><br><span class="line">            &#x2F;&#x2F;这里引发了异常，用0作为被除数  </span><br><span class="line">            int i &#x3D; 100&#x2F;0;  </span><br><span class="line">            &#x2F;&#x2F;如果没有引发异常，执行进入队列的命令  </span><br><span class="line">            multi.exec();  </span><br><span class="line">        &#125;catch(Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            &#x2F;&#x2F;如果出现异常，回滚  </span><br><span class="line">            multi.discard();  </span><br><span class="line">        &#125;finally&#123;  </span><br><span class="line">            System.out.println(jedis.get(&quot;json&quot;));  </span><br><span class="line">            System.out.println(jedis.get(&quot;json2&quot;));  </span><br><span class="line">            &#x2F;&#x2F;最终关闭客户端  </span><br><span class="line">            jedis.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a><strong>整合SpringBoot</strong></h2><p><strong>jedis：</strong> 直连，多线程下不安全，则需要使用jedis pool连接池，类似于BIO模式</p>
<p><strong>lettuce：</strong> 采用netty， 实例可以在多个线程中进行共享，不存在线程不安全的情况，减少了线程数据，类似于NIO模式</p>
<p><strong>引入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>链接配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:  </span><br><span class="line">    redis:  </span><br><span class="line">      host: 127.0.0.1  </span><br><span class="line">      port: 6379</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class SpringbootRedisApplicationTests &#123;  </span><br><span class="line">  </span><br><span class="line">    @Autowired  </span><br><span class="line">    private RedisTemplate&lt;String,String&gt; redisTemplate;  </span><br><span class="line">  </span><br><span class="line">    @Test  </span><br><span class="line">    void contextLoads() &#123;  </span><br><span class="line">        RedisConnection connection &#x3D; Objects.requireNonNull(redisTemplate.getConnectionFactory()).getConnection();  </span><br><span class="line">        connection.flushAll();  </span><br><span class="line">        redisTemplate.opsForValue().set(&quot;myKey&quot;,&quot;myValue&quot;);  </span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(&quot;myKey&quot;));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义RedisTemplate</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class RedisConfig &#123;  </span><br><span class="line">  </span><br><span class="line">  @Bean  </span><br><span class="line">  @SuppressWarnings(&quot;all&quot;)  </span><br><span class="line">  public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;  </span><br><span class="line">      &#x2F;&#x2F; 为了开发方便一般直接使用&lt;String, Object&gt;</span><br><span class="line">      RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;String, Object&gt;();  </span><br><span class="line">      template.setConnectionFactory(factory); </span><br><span class="line">      &#x2F;&#x2F; json序列化</span><br><span class="line">      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);  </span><br><span class="line">      ObjectMapper om &#x3D; new ObjectMapper();  </span><br><span class="line">      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);  </span><br><span class="line">      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);  </span><br><span class="line">      jackson2JsonRedisSerializer.setObjectMapper(om);  </span><br><span class="line">      &#x2F;&#x2F; string的序列化</span><br><span class="line">      StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();  </span><br><span class="line">  </span><br><span class="line">      &#x2F;&#x2F; key采用String的序列化方式  </span><br><span class="line">      template.setKeySerializer(stringRedisSerializer);  </span><br><span class="line">      &#x2F;&#x2F; hash的key也采用String的序列化方式  </span><br><span class="line">      template.setHashKeySerializer(stringRedisSerializer);  </span><br><span class="line">      &#x2F;&#x2F; value序列化方式采用jackson  </span><br><span class="line">      template.setValueSerializer(jackson2JsonRedisSerializer);  </span><br><span class="line">      &#x2F;&#x2F; hash的value序列化方式采用jackson  </span><br><span class="line">      template.setHashValueSerializer(jackson2JsonRedisSerializer);  </span><br><span class="line">      template.afterPropertiesSet();  </span><br><span class="line">  </span><br><span class="line">      return template;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>封装方法</strong></p>
<p>RedisUtil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public final class RedisUtil &#123;  </span><br><span class="line">  </span><br><span class="line">    @Autowired  </span><br><span class="line">    private RedisTemplate&lt;String, Object&gt; redisTemplate;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;common&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 指定缓存失效时间  </span><br><span class="line">     * @param key  键  </span><br><span class="line">     * @param time 时间(秒)  </span><br><span class="line">     *&#x2F;    public boolean expire(String key, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            if (time &gt; 0) &#123;  </span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);  </span><br><span class="line">            &#125;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 根据key 获取过期时间  </span><br><span class="line">     * @param key 键 不能为null  </span><br><span class="line">     * @return 时间(秒) 返回0代表为永久有效  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public long getExpire(String key) &#123;  </span><br><span class="line">        return redisTemplate.getExpire(key, TimeUnit.SECONDS);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 判断key是否存在  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     * @return true 存在 false不存在  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hasKey(String key) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.hasKey(key);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 删除缓存  </span><br><span class="line">     * @param key 可以传一个值 或多个  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)  </span><br><span class="line">    public void del(String... key) &#123;  </span><br><span class="line">        if (key !&#x3D; null &amp;&amp; key.length &gt; 0) &#123;  </span><br><span class="line">            if (key.length &#x3D;&#x3D; 1) &#123;  </span><br><span class="line">                redisTemplate.delete(key[0]);  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;String&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 普通缓存获取  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     * @return 值  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public Object get(String key) &#123;  </span><br><span class="line">        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 普通缓存放入  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return true成功 false失败  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">  </span><br><span class="line">    public boolean set(String key, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForValue().set(key, value);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 普通缓存放入并设置时间  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期  </span><br><span class="line">     * @return true成功 false 失败  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">  </span><br><span class="line">    public boolean set(String key, Object value, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            if (time &gt; 0) &#123;  </span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                set(key, value);  </span><br><span class="line">            &#125;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 递增  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param delta 要增加几(大于0)  </span><br><span class="line">     *&#x2F;    public long incr(String key, long delta) &#123;  </span><br><span class="line">        if (delta &lt; 0) &#123;  </span><br><span class="line">            throw new RuntimeException(&quot;递增因子必须大于0&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return redisTemplate.opsForValue().increment(key, delta);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 递减  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param delta 要减少几(小于0)  </span><br><span class="line">     *&#x2F;    public long decr(String key, long delta) &#123;  </span><br><span class="line">        if (delta &lt; 0) &#123;  </span><br><span class="line">            throw new RuntimeException(&quot;递减因子必须大于0&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return redisTemplate.opsForValue().increment(key, -delta);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Map&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * HashGet     * @param key  键 不能为null  </span><br><span class="line">     * @param item 项 不能为null  </span><br><span class="line">     *&#x2F;    public Object hget(String key, String item) &#123;  </span><br><span class="line">        return redisTemplate.opsForHash().get(key, item);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 获取hashKey对应的所有键值  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     * @return 对应的多个键值  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public Map&lt;Object, Object&gt; hmget(String key) &#123;  </span><br><span class="line">        return redisTemplate.opsForHash().entries(key);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * HashSet     * @param key 键  </span><br><span class="line">     * @param map 对应多个键值  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hmset(String key, Map&lt;String, Object&gt; map) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * HashSet 并设置时间  </span><br><span class="line">     * @param key  键  </span><br><span class="line">     * @param map  对应多个键值  </span><br><span class="line">     * @param time 时间(秒)  </span><br><span class="line">     * @return true成功 false失败  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);  </span><br><span class="line">            if (time &gt; 0) &#123;  </span><br><span class="line">                expire(key, time);  </span><br><span class="line">            &#125;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 向一张hash表中放入数据,如果不存在将创建  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param item  项  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return true 成功 false失败  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hset(String key, String item, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 向一张hash表中放入数据,如果不存在将创建  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param item  项  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间  </span><br><span class="line">     * @return true 成功 false失败  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hset(String key, String item, Object value, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);  </span><br><span class="line">            if (time &gt; 0) &#123;  </span><br><span class="line">                expire(key, time);  </span><br><span class="line">            &#125;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 删除hash表中的值  </span><br><span class="line">     *  </span><br><span class="line">     * @param key  键 不能为null  </span><br><span class="line">     * @param item 项 可以使多个 不能为null  </span><br><span class="line">     *&#x2F;    public void hdel(String key, Object... item) &#123;  </span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 判断hash表中是否有该项的值  </span><br><span class="line">     *  </span><br><span class="line">     * @param key  键 不能为null  </span><br><span class="line">     * @param item 项 不能为null  </span><br><span class="line">     * @return true 存在 false不存在  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean hHasKey(String key, String item) &#123;  </span><br><span class="line">        return redisTemplate.opsForHash().hasKey(key, item);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回  </span><br><span class="line">     *  </span><br><span class="line">     * @param key  键  </span><br><span class="line">     * @param item 项  </span><br><span class="line">     * @param by   要增加几(大于0)  </span><br><span class="line">     *&#x2F;    public double hincr(String key, String item, double by) &#123;  </span><br><span class="line">        return redisTemplate.opsForHash().increment(key, item, by);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * hash递减  </span><br><span class="line">     *  </span><br><span class="line">     * @param key  键  </span><br><span class="line">     * @param item 项  </span><br><span class="line">     * @param by   要减少记(小于0)  </span><br><span class="line">     *&#x2F;    public double hdecr(String key, String item, double by) &#123;  </span><br><span class="line">        return redisTemplate.opsForHash().increment(key, item, -by);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;set&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 根据key获取Set中的所有值  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public Set&lt;Object&gt; sGet(String key) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForSet().members(key);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return null;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 根据value从一个set中查询,是否存在  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return true 存在 false不存在  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean sHasKey(String key, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForSet().isMember(key, value);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将数据放入set缓存  </span><br><span class="line">     *  </span><br><span class="line">     * @param key    键  </span><br><span class="line">     * @param values 值 可以是多个  </span><br><span class="line">     * @return 成功个数  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public long sSet(String key, Object... values) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForSet().add(key, values);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将set数据放入缓存  </span><br><span class="line">     *  </span><br><span class="line">     * @param key    键  </span><br><span class="line">     * @param time   时间(秒)  </span><br><span class="line">     * @param values 值 可以是多个  </span><br><span class="line">     * @return 成功个数  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public long sSetAndTime(String key, long time, Object... values) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Long count &#x3D; redisTemplate.opsForSet().add(key, values);  </span><br><span class="line">            if (time &gt; 0)  </span><br><span class="line">                expire(key, time);  </span><br><span class="line">            return count;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 获取set缓存的长度  </span><br><span class="line">     *  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public long sGetSetSize(String key) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForSet().size(key);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 移除值为value的  </span><br><span class="line">     *  </span><br><span class="line">     * @param key    键  </span><br><span class="line">     * @param values 值 可以是多个  </span><br><span class="line">     * @return 移除的个数  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">  </span><br><span class="line">    public long setRemove(String key, Object... values) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Long count &#x3D; redisTemplate.opsForSet().remove(key, values);  </span><br><span class="line">            return count;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;list&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 获取list缓存的内容  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param start 开始  </span><br><span class="line">     * @param end   结束 0 到 -1代表所有值  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public List&lt;Object&gt; lGet(String key, long start, long end) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForList().range(key, start, end);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return null;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 获取list缓存的长度  </span><br><span class="line">     *  </span><br><span class="line">     * @param key 键  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public long lGetListSize(String key) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForList().size(key);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 通过索引 获取list中的值  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param index 索引 index&gt;&#x3D;0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public Object lGetIndex(String key, long index) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return redisTemplate.opsForList().index(key, index);  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return null;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将list放入缓存  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean lSet(String key, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将list放入缓存  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @param time  时间(秒)  </span><br><span class="line">     *&#x2F;    public boolean lSet(String key, Object value, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);  </span><br><span class="line">            if (time &gt; 0)  </span><br><span class="line">                expire(key, time);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将list放入缓存  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean lSet(String key, List&lt;Object&gt; value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 将list放入缓存  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @param time  时间(秒)  </span><br><span class="line">     * @return  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public boolean lSet(String key, List&lt;Object&gt; value, long time) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);  </span><br><span class="line">            if (time &gt; 0)  </span><br><span class="line">                expire(key, time);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 根据索引修改list中的某条数据  </span><br><span class="line">     *  </span><br><span class="line">     * @param key   键  </span><br><span class="line">     * @param index 索引  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">  </span><br><span class="line">    public boolean lUpdateIndex(String key, long index, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);  </span><br><span class="line">            return true;        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return false;        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 移除N个值为value  </span><br><span class="line">     *     * @param key   键  </span><br><span class="line">     * @param count 移除多少个  </span><br><span class="line">     * @param value 值  </span><br><span class="line">     * @return 移除的个数  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">  </span><br><span class="line">    public long lRemove(String key, long count, Object value) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            Long remove &#x3D; redisTemplate.opsForList().remove(key, count, value);  </span><br><span class="line">            return remove;  </span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据类型与命令</title>
    <url>/2023/03/19/Redis/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<div class="note info">
            <p>Redis共有5种基本数据类型与三种特殊类型</p><p>Redis是<strong>单线程</strong>基于内存操作，cpu不是瓶颈，瓶颈是内存与网络带宽；</p>
          </div>

<a id="more"></a>

<h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a><strong>Redis-Key</strong></h2><p><strong>常用命令：</strong></p>
<ul>
<li><strong>select</strong> 切换数据库</li>
<li><strong>dbsize</strong> 数据库数量查询</li>
<li><strong>key *</strong> 查看所有key</li>
<li><strong>flushdb</strong> 清除当前数据库</li>
<li><strong>flushall</strong> 清除全部数据库内容</li>
<li><strong>set</strong> 设置key</li>
<li><strong>exists</strong> 判断是否存在</li>
<li><strong>expire</strong> 设置key过期时间</li>
<li><strong>ttl</strong> 查看剩余时间</li>
<li><strong>type</strong> 查看key的类型</li>
</ul>
<h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a><strong>五大数据类型</strong></h2><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a><strong>String（字符串）</strong></h3><ul>
<li><p><strong>append</strong> 追加字符串，如果key不存在相当于set一个新的key</p>
</li>
<li><p><strong>strlen</strong> 获取字符串长度</p>
</li>
<li><p><strong>incr</strong> 自增1</p>
</li>
<li><p><strong>decr</strong> 自减1</p>
</li>
<li><p><strong>incrby</strong> 自增一个步长</p>
</li>
<li><p><strong>decrby</strong> 自减一个步长</p>
</li>
<li><p><strong>getrange key 0 1</strong> 获取字符串[0,1]</p>
</li>
<li><p><strong>getrange key 0 -1</strong> 获取全部字符串</p>
</li>
<li><p><strong>setrange key 1 xx</strong> 替换指定位置的字符串</p>
<br>
</li>
<li><p><strong>setex（set with expire）</strong> 设置并附带过期时间</p>
</li>
<li><p><strong>setnx（set if not exist）</strong> 如果不存在再设置（分布式锁中常常设置）</p>
<br>
</li>
<li><p><strong>mset</strong> 同时设置多组kv</p>
</li>
<li><p><strong>mget</strong> 同时获取多个值</p>
</li>
<li><p><strong>msetnx</strong> 如果不存在再设置，同时成功或者失败</p>
<br>

</li>
</ul>
<p><strong>对象</strong> key设计为user:{id}:{filed}</p>
<ul>
<li><p><strong>set user:1 {k1:v1, k1:v1}</strong> 设置一个 user:1 对象，值为json</p>
</li>
<li><p><strong>mset user:1:k1 v1 user:1:k2 v2</strong> 值单独设置</p>
<br>
</li>
<li><p><strong>getset</strong> 先get再set，如果不存在则返回nil，如果存在，获取原来的值；并设置新的值</p>
<br>

</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>对象缓存存储</li>
</ul>
<br>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a><strong>List</strong></h3><p>基本的数据类型，列表，在redis中可以用作队列、栈等</p>
<p>所有的List命令都是“l”开头的</p>
<ul>
<li><p><strong>lpush</strong> 将一个或者多个数值，插入到列表的头部（左）</p>
</li>
<li><p><strong>rpush</strong> 将一个或者多个数值，插入到列表的尾部（右）</p>
</li>
<li><p><strong>lrange list 0 -1</strong> 取值</p>
</li>
<li><p><strong>lpop</strong> 移出第一个元素</p>
</li>
<li><p><strong>rpop</strong> 移出最后一个元素</p>
</li>
<li><p><strong>lindex</strong> 根据下标获取值</p>
</li>
<li><p><strong>llen</strong> 获取列表长度</p>
</li>
<li><p><strong>lrem list 1（删除数量） v</strong> 移除指定的值</p>
</li>
<li><p><strong>ltrim</strong> 截取</p>
<br>
</li>
<li><p><strong>rpoplpush</strong> 移除列表最后一个元素，并添加到一个新列表中</p>
</li>
<li><p><strong>lset</strong> 指定下标更新，没有会报错</p>
</li>
<li><p><strong>linsert</strong> 在具体值前或后插入值</p>
<br></li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>栈 lpush lpop</li>
<li>队列 lpush rpop</li>
</ul>
<br>

<h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a><strong>Set（集合）</strong></h3><p>set中的值不能重复，无序不重复集合<br><br></p>
<ul>
<li><strong>sadd</strong> 添加</li>
<li><strong>smembers</strong> 查看</li>
<li><strong>sismember</strong> 查看某一个值是否存在</li>
<li><strong>srem</strong> 移除某一个值</li>
<li><strong>scard</strong> 查看有多少值</li>
<li><strong>srandmember</strong> 随机抽取一个或多个元素</li>
<li><strong>spop</strong> 随机删除</li>
<li><strong>smove</strong> 将一个指定的值移动到另外一个set集合</li>
<li><strong>sdiff</strong> 差集</li>
<li><strong>sinter</strong> 交集</li>
<li><strong>sunion</strong> 并集</li>
</ul>
<br>

<p><strong>使用场景</strong></p>
<ul>
<li>共同关注</li>
<li>二度好友（六度分割理论）</li>
</ul>
<br>

<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a><strong>Hash</strong></h3><p>Map集合，key-map 值为一个map集合，本质和spring没有太大区别</p>
<ul>
<li><strong>hset</strong> 设置</li>
<li><strong>hget</strong> 取值</li>
<li><strong>hmset</strong> 批量设置</li>
<li><strong>hmget</strong> 批量取</li>
<li><strong>hgetall</strong> 获取全部字段和值</li>
<li><strong>hdel</strong> 删除指定的key字段，对应的值也会被删除</li>
<li><strong>hlen</strong> 获取字段数量</li>
<li><strong>hexists</strong> 判断hash中指定字段是否存在</li>
<li><strong>hkeys</strong> 获取全部key</li>
<li><strong>hvals</strong> 获取所有值</li>
<li><strong>hincrby</strong> 自增</li>
<li><strong>hdecrby</strong> 自减</li>
</ul>
<br>
使用场景：

<ul>
<li>变更的数据 user name ······ 更适用于对象的存储，String更适用于字符的存储</li>
</ul>
<br>

<h3 id="Zest（有序集合）"><a href="#Zest（有序集合）" class="headerlink" title="Zest（有序集合）"></a><strong>Zest（有序集合）</strong></h3><p>在set基础上增加了一个值，set：k1 v1； zset：k1 score1 v1</p>
<ul>
<li><strong>zadd</strong> 添加</li>
<li><strong>zrange</strong> 查询</li>
<li><strong>zrangebyscore</strong> 根据score排序升序</li>
<li><strong>zrevrangebyscore k +inf -inf</strong> 根据score降序</li>
<li><strong>zrem</strong> 删除</li>
<li><strong>zcard</strong> 获取集合中的个数</li>
<li><strong>zcount</strong> 获取指定区间的数量</li>
</ul>
<p>使用场景：</p>
<ul>
<li>set 排序</li>
<li>权重判断</li>
<li>排行榜</li>
</ul>
<p>其余api详见<a href="https://redis.io/docs/" target="_blank" rel="noopener">官网</a></p>
<br>

<h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a><strong>三种特殊数据类型</strong></h2><h3 id="Geospatial（地理位置）"><a href="#Geospatial（地理位置）" class="headerlink" title="Geospatial（地理位置）"></a><strong>Geospatial（地理位置）</strong></h3><p>定位、附近的人、打车位置计算，可以推算地理位置信息</p>
<ul>
<li><strong>geoadd key (纬度 经度 名)</strong> 添加位置，两级添加不了</li>
<li><strong>geopos</strong> 获取指定的位置</li>
<li><strong>geodist</strong> 获取两地的距离</li>
<li><strong>georadius</strong> 通过半径找附近的人，所有的数据都应在一个key里</li>
<li><strong>georadiusbymember</strong> 通过成员名找周边</li>
<li><strong>geohash</strong> 将二维的经纬度转换为一堆字符串，越接近距离越近</li>
</ul>
<p>底层实现原理就是zset，可以使用zset来操作</p>
<ul>
<li><strong>zrem</strong> 删除</li>
<li><strong>zrange</strong> 查看</li>
</ul>
<br>

<h3 id="Hyperloglog（基数统计）"><a href="#Hyperloglog（基数统计）" class="headerlink" title="Hyperloglog（基数统计）"></a><strong>Hyperloglog（基数统计）</strong></h3><p>优点：占用的内存是固定的，计算2^64不同的元素的基数只要12kb</p>
<ul>
<li><strong>pfadd</strong> 添加</li>
<li><strong>pfcount</strong> 计算元素个数</li>
<li><strong>pfmerge</strong> 合并两个key，并集</li>
</ul>
<p>使用场景：</p>
<ul>
<li>计算网页的uv（一个人访问一个网站多次，但是还是算一个人），有0.81%的错误率</li>
</ul>
<p>如果允许容错可以使用hyperloglog，如果不能容错则使用set或者自己的数据类型</p>
<br>

<h3 id="Bitmaps（位存储）"><a href="#Bitmaps（位存储）" class="headerlink" title="Bitmaps（位存储）"></a><strong>Bitmaps（位存储）</strong></h3><ul>
<li><strong>setbit</strong> 设置值</li>
<li><strong>getbit</strong> 查看</li>
<li><strong>bitcount</strong> 统计1的数量</li>
</ul>
<p>使用场景：</p>
<ul>
<li>统计疫情感染人数 0 1 0 0</li>
<li>统计活跃不活跃</li>
<li>登录未登录</li>
<li>打卡</li>
</ul>
<p>两个状态的都可以使用Bitmaps，只有0 1两个状态</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nosql简述</title>
    <url>/2023/03/18/Redis/Nosql%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p><strong>在单机Mysql时可能出现：</strong></p>
<ul>
<li>数据量太大</li>
<li>数据的索引太大</li>
<li>访问量，读写混合量太大</li>
</ul>
<br>

<p><strong>进而出现Memcached（缓存）+ Mysql + 垂直拆分（读写分离）</strong></p>
<p>通过多台数据库服务器分配读写的任务分摊压力，使用缓存来保存以提高效率</p>
<br>

<p><strong>分库分表 + 水平拆分 + Mysql集群</strong></p>
<p>早年MyISAM：表锁，高并发下会出现锁问题</p>
<p>现今Innodb：行锁</p>
<p>所以通过分库分表来减少写的压力，将读写统一为一个集群，通过多集群分摊压力提高效率</p>
<br>

<p><strong>NoSql的出现</strong></p>
<p>用户的各类信息爆发式增长，数据量过多，Mysql等关系型数据库不够用，为了解决这类情况需要用到NoSql数据库</p>
<a id="more"></a>

<br>

<h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a><strong>什么是NoSQL</strong></h2><p>NoSQL = Not only Sql，泛指非关系型数据库</p>
<p>关系型数据库：表格，行，列</p>
<p>非关系型数据库：不需要一个固定的存储格式，可以简单地进行横向扩展</p>
<br>

<p><strong>NoSQL特点</strong></p>
<ul>
<li>方便扩展</li>
<li>大数据量高性能</li>
<li>数据类型多样，不需要事先设计数据库</li>
<li>传统RDBMS<ul>
<li>结构化组织</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>数据操作，数据定义语言</li>
<li>严格的一致性</li>
<li>基础的事务</li>
<li>······</li>
</ul>
</li>
<li>NoSQL<ul>
<li>不仅仅是数据</li>
<li>没有固定的查询语言</li>
<li>键值对存储，列存储，文档存储，图形数据库存储（社交关系）</li>
<li>CAP定理和BASE（异地多活）</li>
<li>高性能，高可用，高可扩展</li>
<li>······</li>
</ul>
</li>
</ul>
<br>

<h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a><strong>NoSQL的四大分类</strong></h2><p><strong>KV键值对</strong></p>
<ul>
<li>Redis</li>
<li>Tair</li>
<li>memecache</li>
</ul>
<p><strong>文档型数据库（bson格式）</strong></p>
<ul>
<li>MongoDB</li>
<li>ConthDB</li>
</ul>
<p><strong>列存储数据库</strong></p>
<ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<p><strong>图关系数据库</strong></p>
<ul>
<li>Neo4j InfoGrid</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Nosql</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MP插件的基本使用</title>
    <url>/2023/03/17/MybatisPlus/MP%E6%8F%92%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Mybatis插件机制"><a href="#Mybatis插件机制" class="headerlink" title="Mybatis插件机制"></a><strong>Mybatis插件机制</strong></h3><ul>
<li>拦截执行器的方法 Executor</li>
<li>拦截参数的处理 ParameterHandler</li>
<li>拦截结果集的处理 ResultSetHandler</li>
<li>拦截sql语法构建的处理 StatementHandler<br>
<a id="more"></a>

</li>
</ul>
<p><strong>myInterceptor</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Intercepts(&#123;@Signature(  </span><br><span class="line">        type&#x3D; Executor.class,  &#x2F;&#x2F; 拦截的类型</span><br><span class="line">        method &#x3D; &quot;update&quot;,  &#x2F;&#x2F; 拦截的方法名</span><br><span class="line">        args &#x3D; &#123;MappedStatement.class,Object.class&#125;)&#125;)  </span><br><span class="line">public class MyInterceptor implements Interceptor &#123;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Object intercept(Invocation invocation) throws Throwable &#123;  </span><br><span class="line">        &#x2F;&#x2F;拦截方法，具体业务逻辑编写的位置  </span><br><span class="line">        return invocation.proceed();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Object plugin(Object target) &#123;  </span><br><span class="line">        &#x2F;&#x2F;创建target对象的代理对象,目的是将当前拦截器加入到该对象中  </span><br><span class="line">        return Plugin.wrap(target, this);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void setProperties(Properties properties) &#123;  </span><br><span class="line">        &#x2F;&#x2F;属性设置  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中plugin方法会调用四次，分别将四种拦截器加入对象中</p>
<p><strong>注入拦截器至容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean &#x2F;&#x2F;注入自定义的拦截器（插件）  </span><br><span class="line">public MyInterceptor myInterceptor()&#123;  </span><br><span class="line">    return new MyInterceptor();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="执行分析插件"><a href="#执行分析插件" class="headerlink" title="执行分析插件"></a><strong>执行分析插件</strong></h3><p>可以用作阻断全表更新、删除的操作，仅适用于开发环境，不适用于生产环境（性能原因）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean &#x2F;&#x2F;SQL分析插件  </span><br><span class="line">public SqlExplainInterceptor sqlExplainInterceptor()&#123;  </span><br><span class="line">  </span><br><span class="line">    SqlExplainInterceptor sqlExplainInterceptor &#x3D; new SqlExplainInterceptor();  </span><br><span class="line">  </span><br><span class="line">    List&lt;ISqlParser&gt; list &#x3D; new ArrayList&lt;&gt;();  </span><br><span class="line">    list.add(new BlockAttackSqlParser()); &#x2F;&#x2F;全表更新、删除的阻断器  </span><br><span class="line">  </span><br><span class="line">    sqlExplainInterceptor.setSqlParserList(list);  </span><br><span class="line">  </span><br><span class="line">    return sqlExplainInterceptor;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a><strong>性能分析插件</strong></h3><p>用于查看每条sql语句及其执行时间，可以设置最大执行时间，超出后会抛出异常。仅适用于开发环境，不适用于生产环境（性能原因）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;  </span><br><span class="line">    &lt;!-- 性能分析插件 --&gt;  </span><br><span class="line">    &lt;plugin interceptor&#x3D;&quot;com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor&quot;&gt;  </span><br><span class="line">        &lt;!--最大的执行时间，单位为毫秒--&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;maxTime&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;!--对输出的SQL做格式化，默认为false--&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;format&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;&#x2F;plugin&gt;   </span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure>

<h3 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a><strong>乐观锁插件</strong></h3><p>更新一条记录的时候，禁止这条记录被别人更新</p>
<p>实现方式：</p>
<ul>
<li>取出记录时，获得当前version</li>
<li>更新时带上这个version</li>
<li>执行更新时，set version = newVersion where version = oldVersion</li>
<li>如果version不对，则更新失败</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin interceptor&#x3D;&quot;com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>需要对应数据库和实体类添加一个version字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Version &#x2F;&#x2F;乐观锁的版本字段  </span><br><span class="line">private Integer version;</span><br></pre></td></tr></table></figure>

<h3 id="Sql注入器"><a href="#Sql注入器" class="headerlink" title="Sql注入器"></a><strong>Sql注入器</strong></h3><p>扩充BaseMapper</p>
<p><strong>MyBaseMapper</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface MyBaseMapper&lt;T&gt; extends BaseMapper&lt;T&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    List&lt;T&gt; findAll();  </span><br><span class="line">    &#x2F;&#x2F; 扩展其他的方法  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserMapper extends MyBaseMapper&lt;User&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    User findById(Long id);  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MySqlInjector</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MySqlInjector extends DefaultSqlInjector &#123;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public List&lt;AbstractMethod&gt; getMethodList() &#123;  </span><br><span class="line">        List&lt;AbstractMethod&gt; list &#x3D; new ArrayList&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 获取父类中的集合  </span><br><span class="line">        list.addAll(super.getMethodList());  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 再扩充自定义的方法  </span><br><span class="line">        list.add(new FindAll());  </span><br><span class="line">  </span><br><span class="line">        return list;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FindAll</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class FindAll extends AbstractMethod &#123;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo) &#123;  </span><br><span class="line">  </span><br><span class="line">        String sql &#x3D; &quot;select * from &quot; + tableInfo.getTableName();  </span><br><span class="line">        SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration,sql, modelClass);  </span><br><span class="line">  </span><br><span class="line">        return this.addSelectMappedStatement(mapperClass, &quot;findAll&quot;, sqlSource, modelClass, tableInfo);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注入自定义SQL注入器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**  </span><br><span class="line"> * 注入自定义的SQL注入器  </span><br><span class="line"> * @return  </span><br><span class="line"> *&#x2F;  </span><br><span class="line">@Bean  </span><br><span class="line">public MySqlInjector mySqlInjector()&#123;  </span><br><span class="line">    return new MySqlInjector();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a><strong>自动填充</strong></h3><p>对某些字段进行自动填充</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 插入数据时进行填充</span><br><span class="line">@TableField(fill &#x3D; FieldFill.INSERT) </span><br><span class="line">private String password;</span><br></pre></td></tr></table></figure>

<p><strong>MyMetaObjectHandler</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class MyMetaObjectHandler implements MetaObjectHandler &#123;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">        * 插入数据时填充  </span><br><span class="line">     * @param metaObject  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void insertFill(MetaObject metaObject) &#123;  </span><br><span class="line">        &#x2F;&#x2F; 先获取到password的值，再进行判断，如果为空，就进行填充，如果不为空，就不做处理  </span><br><span class="line">        Object password &#x3D; getFieldValByName(&quot;password&quot;, metaObject);  </span><br><span class="line">        if(null &#x3D;&#x3D; password)&#123;  </span><br><span class="line">           setFieldValByName(&quot;password&quot;, &quot;888888&quot;, metaObject);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * 更新数据时填充  </span><br><span class="line">     * @param metaObject  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void updateFill(MetaObject metaObject) &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a><strong>逻辑删除</strong></h3><p>标记为删除，但并不是物理删除</p>
<p><strong>修改表结构</strong></p>
<p>添加deleted字段，用于表示是否被删除，1删除，0未删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableLogic &#x2F;&#x2F; 逻辑删除字段 ，1-删除，0-未删除  </span><br><span class="line">private Integer deleted;</span><br></pre></td></tr></table></figure>

<p><strong>application.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除状态的值为：1</span><br><span class="line"></span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-value&#x3D;1</span><br><span class="line"></span><br><span class="line"># 未删除状态的值为：0</span><br><span class="line"></span><br><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value&#x3D;0</span><br></pre></td></tr></table></figure>

<h3 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a><strong>通用枚举</strong></h3><p><strong>修改表结构</strong></p>
<p>添加sex字段，1男，2女</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private SexEnum sex; &#x2F;&#x2F;性别，枚举类型</span><br></pre></td></tr></table></figure>

<p><strong>定义枚举</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum SexEnum implements IEnum&lt;Integer&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    MAN(1,&quot;男&quot;),  </span><br><span class="line">    WOMAN(2,&quot;女&quot;);  </span><br><span class="line">  </span><br><span class="line">    private int value;  </span><br><span class="line">    private String desc;  </span><br><span class="line">  </span><br><span class="line">    SexEnum(int value, String desc) &#123;  </span><br><span class="line">        this.value &#x3D; value;  </span><br><span class="line">        this.desc &#x3D; desc;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Integer getValue() &#123;  </span><br><span class="line">        return this.value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return this.desc;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 枚举包扫描</span><br><span class="line"></span><br><span class="line">mybatis-plus.type-enums-package&#x3D;cn.itcast.mp.enums</span><br></pre></td></tr></table></figure>

<h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a><strong>代码生成器</strong></h3><p><strong>MysqlGenerator.java</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.mp.generator;  </span><br><span class="line">  </span><br><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">import java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line">import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;  </span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.StringPool;  </span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.StringUtils;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.AutoGenerator;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.InjectionConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.DataSourceConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.FileOutConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.GlobalConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.PackageConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.StrategyConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.TemplateConfig;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.po.TableInfo;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;  </span><br><span class="line">import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;  </span><br><span class="line">  </span><br><span class="line">&#x2F;**  </span><br><span class="line"> * &lt;p&gt;  </span><br><span class="line"> * mysql 代码生成器演示例子  </span><br><span class="line"> * &lt;&#x2F;p&gt;  </span><br><span class="line"> *&#x2F;  </span><br><span class="line">public class MysqlGenerator &#123;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * &lt;p&gt;  </span><br><span class="line">     * 读取控制台内容  </span><br><span class="line">     * &lt;&#x2F;p&gt;  </span><br><span class="line">     *&#x2F;  </span><br><span class="line">    public static String scanner(String tip) &#123;  </span><br><span class="line">        Scanner scanner &#x3D; new Scanner(System.in);  </span><br><span class="line">        StringBuilder help &#x3D; new StringBuilder();  </span><br><span class="line">        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);  </span><br><span class="line">        System.out.println(help.toString());  </span><br><span class="line">        if (scanner.hasNext()) &#123;  </span><br><span class="line">            String ipt &#x3D; scanner.next();  </span><br><span class="line">            if (StringUtils.isNotEmpty(ipt)) &#123;  </span><br><span class="line">                return ipt;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;**  </span><br><span class="line">     * RUN THIS     *&#x2F;    public static void main(String[] args) &#123;  </span><br><span class="line">        &#x2F;&#x2F; 代码生成器  </span><br><span class="line">        AutoGenerator mpg &#x3D; new AutoGenerator();  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 全局配置  </span><br><span class="line">        GlobalConfig gc &#x3D; new GlobalConfig();  </span><br><span class="line">        String projectPath &#x3D; System.getProperty(&quot;user.dir&quot;);  </span><br><span class="line">        gc.setOutputDir(projectPath + &quot;&#x2F;src&#x2F;main&#x2F;java&quot;);  </span><br><span class="line">        gc.setAuthor(&quot;itcast&quot;);  </span><br><span class="line">        gc.setOpen(false);  </span><br><span class="line">        mpg.setGlobalConfig(gc);  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 数据源配置  </span><br><span class="line">        DataSourceConfig dsc &#x3D; new DataSourceConfig();  </span><br><span class="line">        dsc.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mp?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;utf8&quot;);  </span><br><span class="line">        &#x2F;&#x2F; dsc.setSchemaName(&quot;public&quot;);  </span><br><span class="line">        dsc.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);  </span><br><span class="line">        dsc.setUsername(&quot;root&quot;);  </span><br><span class="line">        dsc.setPassword(&quot;root&quot;);  </span><br><span class="line">        mpg.setDataSource(dsc);  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 包配置  </span><br><span class="line">        PackageConfig pc &#x3D; new PackageConfig();  </span><br><span class="line">        pc.setModuleName(scanner(&quot;模块名&quot;));  </span><br><span class="line">        pc.setParent(&quot;cn.itcast.mp.generator&quot;);  </span><br><span class="line">        mpg.setPackageInfo(pc);  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 自定义配置  </span><br><span class="line">        InjectionConfig cfg &#x3D; new InjectionConfig() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void initMap() &#123;  </span><br><span class="line">                &#x2F;&#x2F; to do nothing  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        List&lt;FileOutConfig&gt; focList &#x3D; new ArrayList&lt;&gt;();  </span><br><span class="line">        focList.add(new FileOutConfig(&quot;&#x2F;templates&#x2F;mapper.xml.ftl&quot;) &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public String outputFile(TableInfo tableInfo) &#123;  </span><br><span class="line">                &#x2F;&#x2F; 自定义输入文件名称  </span><br><span class="line">                return projectPath + &quot;&#x2F;itcast-mp-generator&#x2F;src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;&quot; + pc.getModuleName()  </span><br><span class="line">                        + &quot;&#x2F;&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        cfg.setFileOutConfigList(focList);  </span><br><span class="line">        mpg.setCfg(cfg);  </span><br><span class="line">        mpg.setTemplate(new TemplateConfig().setXml(null));  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 策略配置  </span><br><span class="line">        StrategyConfig strategy &#x3D; new StrategyConfig();  </span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);  </span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);  </span><br><span class="line">&#x2F;&#x2F;        strategy.setSuperEntityClass(&quot;com.baomidou.mybatisplus.samples.generator.common.BaseEntity&quot;);  </span><br><span class="line">        strategy.setEntityLombokModel(true);  </span><br><span class="line">&#x2F;&#x2F;        strategy.setSuperControllerClass(&quot;com.baomidou.mybatisplus.samples.generator.common.BaseController&quot;);  </span><br><span class="line">        strategy.setInclude(scanner(&quot;表名&quot;));  </span><br><span class="line">        strategy.setSuperEntityColumns(&quot;id&quot;);  </span><br><span class="line">        strategy.setControllerMappingHyphenStyle(true);  </span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);  </span><br><span class="line">        mpg.setStrategy(strategy);  </span><br><span class="line">        &#x2F;&#x2F; 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！  </span><br><span class="line">        mpg.setTemplateEngine(new FreemarkerTemplateEngine());  </span><br><span class="line">        mpg.execute();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MybatisX快速开发插件"><a href="#MybatisX快速开发插件" class="headerlink" title="MybatisX快速开发插件"></a><strong>MybatisX快速开发插件</strong></h3><p>在idea中安装插件，可以实现以下功能：</p>
<ul>
<li>Java与xml调用跳转</li>
<li>Mapper自动生成xml</li>
</ul>
]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MP实现ActiveRecord</title>
    <url>/2023/03/16/MybatisPlus/MP%E5%AE%9E%E7%8E%B0ActiveRecord/</url>
    <content><![CDATA[<p>实体类中继承 Model&lt;T&gt;即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User extends Model&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在实现中不需要显性引入Mapper，但是Mapper中仍要继承BaseMapper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectById()&#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setId(16L);  </span><br><span class="line">   </span><br><span class="line">    User user &#x3D; user.selectById();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<a id="more"></a>


<p><strong>新增</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testInsert()&#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setUserName(&quot;diaochan&quot;);  </span><br><span class="line">    user.setPassword(&quot;123456&quot;);  </span><br><span class="line">    user.setAge(20);  </span><br><span class="line">    user.setName(&quot;貂蝉&quot;);  </span><br><span class="line">    user.setMail(&quot;diaochan@itcast.cn&quot;);  </span><br><span class="line">    user.setVersion(1);  </span><br><span class="line">    user.setSex(SexEnum.WOMAN); &#x2F;&#x2F;使用的是枚举  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 调用AR的insert方法进行插入数据  </span><br><span class="line">    boolean insert &#x3D; user.insert();  </span><br><span class="line">    System.out.println(&quot;result &#x3D;&gt; &quot; + insert);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>更新</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testUpdate()&#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setId(13L);&#x2F;&#x2F; 查询条件  </span><br><span class="line">    user.setAge(31); &#x2F;&#x2F; 更新的数据  </span><br><span class="line">  </span><br><span class="line">    boolean result &#x3D; user.updateById();  </span><br><span class="line">    System.out.println(&quot;result &#x3D;&gt; &quot; + result);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDelete()&#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setId(13L);  </span><br><span class="line">  </span><br><span class="line">    boolean delete &#x3D; user.deleteById();  </span><br><span class="line">    System.out.println(&quot;result &#x3D;&gt; &quot; + delete);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelect()&#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper  &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.ge(&quot;age&quot;, 30); &#x2F;&#x2F;大于等于30岁的用户查询出来  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; user.selectList(wrapper);  </span><br><span class="line">    for (User user1 : users) &#123;  </span><br><span class="line">        System.out.println(user1);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>ActiveRecord</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MP条件构造器</title>
    <url>/2023/03/16/MybatisPlus/MP%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    <content><![CDATA[<div class="note info">
            <h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>具体见官网文档：</p><p><a href="https://baomidou.com/pages/10c804/#abstractwrapper" target="_blank" rel="noopener">条件构造器</a> </p>
          </div>

<p>以下是常用的基本操作：</p>
<a id="more"></a>

<ul>
<li><strong>allEq</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testAllEq()&#123;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; params &#x3D; new HashMap&lt;&gt;();  </span><br><span class="line">    params.put(&quot;name&quot;, &quot;李四&quot;);  </span><br><span class="line">    params.put(&quot;age&quot;, &quot;20&quot;);  </span><br><span class="line">    params.put(&quot;password&quot;, null);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE password IS NULL AND name &#x3D; ? AND age &#x3D; ?  </span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq(params);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? AND age &#x3D; ?</span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq(params, false);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE age &#x3D; ?</span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq((k, v) -&gt; (k.equals(&quot;age&quot;) || k.equals(&quot;id&quot;)) , params);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? AND age &#x3D; ?</span><br><span class="line">    wrapper.allEq((k, v) -&gt; (k.equals(&quot;age&quot;) || k.equals(&quot;id&quot;) || k.equals(&quot;name&quot;)) , params);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>like</strong> %值%</p>
</li>
<li><p><strong>notLike</strong> %值% 取反</p>
</li>
<li><p><strong>likeLeft</strong> %值</p>
</li>
<li><p><strong>likeRight</strong> 值%</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testLike()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F; SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name LIKE ?  </span><br><span class="line">    &#x2F;&#x2F; 参数：%五(String)  </span><br><span class="line">    wrapper.likeLeft(&quot;name&quot;, &quot;五&quot;);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>or</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testOr()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F; SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? OR age &#x3D; ?  </span><br><span class="line">    wrapper.eq(&quot;name&quot;, &quot;王五&quot;).or().eq(&quot;age&quot;, 21);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>select部分</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelect()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,name,age FROM tb_user WHERE name &#x3D; ? OR age &#x3D; ?  </span><br><span class="line">    wrapper.eq(&quot;name&quot;, &quot;王五&quot;)  </span><br><span class="line">            .or()  </span><br><span class="line">            .eq(&quot;age&quot;, 21)  </span><br><span class="line">            .select(&quot;id&quot;,&quot;name&quot;,&quot;age&quot;); &#x2F;&#x2F;指定查询的字段  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus配置项</title>
    <url>/2023/03/16/MybatisPlus/MybatisPlus%E9%85%8D%E7%BD%AE%E9%A1%B9/</url>
    <content><![CDATA[<h3 id="常用的MybatisPlus配置项"><a href="#常用的MybatisPlus配置项" class="headerlink" title="常用的MybatisPlus配置项"></a>常用的MybatisPlus配置项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定全局的配置文件</span><br><span class="line">mybatis-plus.config-location&#x3D;classpath:mybatis-config.xml</span><br><span class="line"></span><br><span class="line"># 指定Mapper.xml文件的路径</span><br><span class="line">mybatis-plus.mapper-locations &#x3D; classpath*:mybatis&#x2F;*.xml</span><br><span class="line"></span><br><span class="line"># 实体对象的扫描包</span><br><span class="line">mybatis-plus.type-aliases-package &#x3D; cn.itcast.mp.pojo</span><br><span class="line"></span><br><span class="line"># 禁用自定的驼峰映射</span><br><span class="line">#mybatis-plus.configuration.map-underscore-to-camel-case&#x3D;true</span><br><span class="line"></span><br><span class="line"># 禁用缓存</span><br><span class="line">#mybatis-plus.configuration.cache-enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># 全局的id生成策略</span><br><span class="line">#mybatis-plus.global-config.db-config.id-type&#x3D;input</span><br><span class="line">mybatis-plus.global-config.db-config.id-type&#x3D;auto</span><br><span class="line"></span><br><span class="line"># 全局的表名的前缀</span><br><span class="line">mybatis-plus.global-config.db-config.table-prefix&#x3D;tb_</span><br><span class="line"></span><br><span class="line"># 删除状态的值为：1</span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-value&#x3D;1</span><br><span class="line"></span><br><span class="line"># 未删除状态的值为：0</span><br><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value&#x3D;0</span><br><span class="line"></span><br><span class="line"># 枚举包扫描</span><br><span class="line">mybatis-plus.type-enums-package&#x3D;cn.itcast.mp.enums</span><br></pre></td></tr></table></figure>

<a id="more"></a>
]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus的CRUD操作</title>
    <url>/2023/03/15/MybatisPlus/MybatisPlus%E7%9A%84CRUD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>在继承MP的BaseMapper后已经有了基本的操作：</p>
<p><img src="https://i.imgtg.com/2023/03/15/fwB86.png" alt="fwB86.png"></p>
<p>返回值为int，指受影响的数据条数。</p>
<a id="more"></a>

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a><strong>插入</strong></h3><p>设定id策略@TableId</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableId(type &#x3D; IdType.AUTO) &#x2F;&#x2F;通过添加注解改变MP的id策略</span><br><span class="line"></span><br><span class="line">AUTO(0),  &#x2F;&#x2F;id自增</span><br><span class="line">NONE(1),  &#x2F;&#x2F;未设置主键类型</span><br><span class="line">INPUT(2), &#x2F;&#x2F;用户输入id，可通过自己注册自动填充插件进行填充</span><br><span class="line">&#x2F;&#x2F;以下类型只有当插入id为空时才会自动填充</span><br><span class="line">ID_WORKER(3),  &#x2F;&#x2F;全局唯一id（idWorker）</span><br><span class="line">UUID(4),  &#x2F;&#x2F;全局唯一id（UUID）</span><br><span class="line">ID_WORKER_STR(5); &#x2F;&#x2F;字符串全局唯一id（idWorker的字符串表示）</span><br></pre></td></tr></table></figure>

<p>指定字段属性@TableField</p>
<p>1、解决属性名和字段名不一致的问题</p>
<p>2、解决属性字段在表中不存在的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableField(value &#x3D; &quot;email&quot;) &#x2F;&#x2F;指定数据表中字段名  </span><br><span class="line">private String mail;  </span><br><span class="line">  </span><br><span class="line">@TableField(exist &#x3D; false)  </span><br><span class="line">private String address; &#x2F;&#x2F;在数据库表中是不存在的</span><br><span class="line"></span><br><span class="line">@TableField(select &#x3D; false) &#x2F;&#x2F;查询时不返回该字段的值  </span><br><span class="line">private String password;</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h3><p>根据id更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testUpdateById() &#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setId(1L); &#x2F;&#x2F;条件，根据id更新  </span><br><span class="line">    user.setAge(19); &#x2F;&#x2F;更新的字段  </span><br><span class="line">    user.setPassword(&quot;666666&quot;);  </span><br><span class="line">  </span><br><span class="line">    int result &#x3D; this.userMapper.updateById(user);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testUpdate() &#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setAge(20); &#x2F;&#x2F;更新的字段  </span><br><span class="line">    user.setPassword(&quot;8888888&quot;);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.eq(&quot;user_name&quot;, &quot;zhangsan&quot;); &#x2F;&#x2F;匹配user_name &#x3D; zhangsan 的用户数据  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;根据条件做更新  </span><br><span class="line">    int result &#x3D; this.userMapper.update(user, wrapper);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void testUpdate2() &#123;  </span><br><span class="line">  </span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper &#x3D; new UpdateWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.set(&quot;age&quot;, 21).set(&quot;password&quot;, &quot;999999&quot;) &#x2F;&#x2F;更新的字段  </span><br><span class="line">    .eq(&quot;user_name&quot;, &quot;zhangsan&quot;); &#x2F;&#x2F;更新的条件  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;根据条件做更新  </span><br><span class="line">    int result &#x3D; this.userMapper.update(null, wrapper);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h3><p>根据id删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDeleteById()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id删除数据  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteById(2L);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDeleteByMap()&#123;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;user_name&quot;, &quot;zhangsan&quot;);  </span><br><span class="line">    map.put(&quot;password&quot;, &quot;999999&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据map删除数据，多条件之间是and关系  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteByMap(map); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据包装条件删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDelete()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;用法一：  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.eq(&quot;user_name&quot;, &quot;caocao1&quot;)  </span><br><span class="line">	        .eq(&quot;password&quot;, &quot;123456&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;用法二：  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setPassword(&quot;123456&quot;);  </span><br><span class="line">    user.setUserName(&quot;caocao&quot;);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;(user);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据包装条件做删除  </span><br><span class="line">    int result &#x3D; this.userMapper.delete(wrapper);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据id批量删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void  testDeleteBatchIds()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id批量删除数据  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteBatchIds(Arrays.asList(10L, 11L));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h3><p>根据id查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectById() &#123;  </span><br><span class="line">    User user &#x3D; this.userMapper.selectById(2L);  </span><br><span class="line">    System.out.println(user);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据id批量查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectBatchIds()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id批量查询数据  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectBatchIds(Arrays.asList(2L, 3L, 4L, 100L));  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询一条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectOne()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;查询条件  </span><br><span class="line">    wrapper.eq(&quot;password&quot;, &quot;123456&quot;);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 查询的数据超过一条时，会抛出异常  </span><br><span class="line">    User user &#x3D; this.userMapper.selectOne(wrapper);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件查询数据条数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectCount()&#123;  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.gt(&quot;age&quot;, 20); &#x2F;&#x2F; 条件：年龄大于20岁的用户  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据条件查询数据条数  </span><br><span class="line">    Integer count &#x3D; this.userMapper.selectCount(wrapper);  </span><br><span class="line">    System.out.println(&quot;count &#x3D;&gt; &quot; + count);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询多条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectList()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;设置查询条件  </span><br><span class="line">    wrapper.like(&quot;email&quot;, &quot;itcast&quot;);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页查询</p>
<p>MybatisPlusConfig.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">@MapperScan(&quot;cn.itcast.mp.mapper&quot;) &#x2F;&#x2F;设置mapper接口的扫描包  </span><br><span class="line">public class MybatisPlusConfig &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Bean &#x2F;&#x2F;配置分页插件  </span><br><span class="line">    public PaginationInterceptor paginationInterceptor()&#123;  </span><br><span class="line">        return new PaginationInterceptor();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectPage()&#123;  </span><br><span class="line">  </span><br><span class="line">    Page&lt;User&gt; page &#x3D; new Page&lt;&gt;(3,1); &#x2F;&#x2F;查询第3页，查询1条数据  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;设置查询条件  </span><br><span class="line">    wrapper.like(&quot;email&quot;, &quot;itcast&quot;);  </span><br><span class="line">  </span><br><span class="line">    IPage&lt;User&gt; iPage &#x3D; this.userMapper.selectPage(page, wrapper);  </span><br><span class="line">    System.out.println(&quot;数据总条数： &quot; + iPage.getTotal());  </span><br><span class="line">    System.out.println(&quot;数据总页数： &quot; + iPage.getPages());  </span><br><span class="line">    System.out.println(&quot;当前页数： &quot; + iPage.getCurrent());  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; records &#x3D; iPage.getRecords();  </span><br><span class="line">    for (User record : records) &#123;  </span><br><span class="line">        System.out.println(record);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus的整合</title>
    <url>/2023/03/14/MybatisPlus/MybatisPlus%E7%9A%84%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>具体实现Spring Springboot与MP的整合</p>
<h3 id="一、Spring-Mybatis-mp实现"><a href="#一、Spring-Mybatis-mp实现" class="headerlink" title="一、Spring + Mybatis + mp实现"></a>一、Spring + Mybatis + mp实现</h3><p><strong>jdbc.properties</strong>  jdbc配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver  </span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mp?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;autoReconnect&#x3D;true&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false  </span><br><span class="line">jdbc.username&#x3D;root  </span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>applicationContext.xml</strong>  Spring配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;  </span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;  </span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;  </span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans  </span><br><span class="line">      http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:*.properties&quot;&#x2F;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 定义数据源 --&gt;  </span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;  </span><br><span class="line">          destroy-method&#x3D;&quot;close&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;minIdle&quot; value&#x3D;&quot;5&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;&#x2F;bean&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;  </span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;globalConfig&quot;&gt;  </span><br><span class="line">            &lt;bean class&#x3D;&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;&gt;  </span><br><span class="line">                &lt;property name&#x3D;&quot;dbConfig&quot;&gt;  </span><br><span class="line">                    &lt;bean class&#x3D;&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;&gt;  </span><br><span class="line">                        &lt;property name&#x3D;&quot;idType&quot; value&#x3D;&quot;AUTO&quot;&#x2F;&gt;  </span><br><span class="line">                    &lt;&#x2F;bean&gt;</span><br><span class="line">				&lt;&#x2F;property&gt;</span><br><span class="line">			&lt;&#x2F;bean&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;  </span><br><span class="line">	</span><br><span class="line">    &lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;  </span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.itcast.mp.simple.mapper&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;&#x2F;bean&gt;  </span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p><strong>User</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.annotation.TableName;  </span><br><span class="line">import lombok.AllArgsConstructor;  </span><br><span class="line">import lombok.Data;  </span><br><span class="line">import lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line">@Data  </span><br><span class="line">@NoArgsConstructor  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">@TableName(&quot;tb_user&quot;)  </span><br><span class="line">public class User &#123;  </span><br><span class="line">  </span><br><span class="line">    private Long id;  </span><br><span class="line">    private String userName;  </span><br><span class="line">    private String password;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Integer age;  </span><br><span class="line">    private String email;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper</strong>接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cn.itcast.mp.simple.pojo.User;  </span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;  </span><br><span class="line">  </span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、SpringBoot-Mybatis-mp实现"><a href="#二、SpringBoot-Mybatis-mp实现" class="headerlink" title="二、SpringBoot + Mybatis + mp实现"></a>二、SpringBoot + Mybatis + mp实现</h3><p><strong>application.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.application.name &#x3D; itcast-mp-springboot  </span><br><span class="line">  </span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver  </span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mp?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;autoReconnect&#x3D;true&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false  </span><br><span class="line">spring.datasource.username&#x3D;root  </span><br><span class="line">spring.datasource.password&#x3D;root</span><br></pre></td></tr></table></figure>

<p><strong>pojo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.annotation.TableName;  </span><br><span class="line">import lombok.AllArgsConstructor;  </span><br><span class="line">import lombok.Data;  </span><br><span class="line">import lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line">@Data  </span><br><span class="line">@NoArgsConstructor  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">@TableName(&quot;tb_user&quot;)  </span><br><span class="line">public class User &#123;  </span><br><span class="line">  </span><br><span class="line">    private Long id;  </span><br><span class="line">    private String userName;  </span><br><span class="line">    private String password;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Integer age;  </span><br><span class="line">    private String email;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mapper</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cn.itcast.mp.pojo.User;</span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.mp; import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication; </span><br><span class="line">import org.springframework.boot.WebApplicationType; </span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication; </span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line">@MapperScan(&quot;cn.itcast.mp.mapper&quot;) &#x2F;&#x2F;设置mapper接口的扫描包</span><br><span class="line">@SpringBootApplication public class MyApplication &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(MyApplication.class, args); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MybatisPlus</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动装配</title>
    <url>/2023/03/13/SpringBoot/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<div class="note info">
            <h3 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a><strong>SpringBoot自动装配原理</strong></h3><p>通过Condition、enable、import等注解实现自动装配</p>
          </div>

<a id="more"></a>

<h2 id="一、Condition"><a href="#一、Condition" class="headerlink" title="一、Condition"></a><strong>一、Condition</strong></h2><p>实现选择性创建Bean操作<br><br></p>
<ol>
<li>通过坐标是否存在从而创建Bean</li>
</ol>
<p><strong>ClassCondition:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ClassCondition implements Condition &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.需求： 导入Jedis坐标后创建Bean</span><br><span class="line">        &#x2F;&#x2F;思路：判断redis.clients.jedis.Jedis.class文件是否存在</span><br><span class="line">        boolean flag &#x3D; true;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; cls &#x3D; Class.forName(&quot;redis.clients.jedis.Jedis&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserConfig:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Conditional(ClassCondition.class)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将类的判断变为动态的判断</li>
</ol>
<p><strong>ClassCondition:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ClassCondition implements Condition &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param context 上下文对象。用于获取环境，IOC容器，ClassLoader对象</span><br><span class="line">     * @param metadata 注解元对象。 可以用于获取注解定义的属性值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.需求： 导入通过注解属性值value指定坐标后创建Bean</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取注解属性值  value</span><br><span class="line">        Map&lt;String, Object&gt; map &#x3D; metadata.getAnnotationAttributes(ConditionOnClass.class.getName());</span><br><span class="line">        String[] value &#x3D; (String[]) map.get(&quot;value&quot;);</span><br><span class="line"></span><br><span class="line">        boolean flag &#x3D; true;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (String className : value) &#123;</span><br><span class="line">                Class&lt;?&gt; cls &#x3D; Class.forName(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConditionOnClass</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Conditional(ClassCondition.class)</span><br><span class="line">public @interface ConditionOnClass &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserConfig</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @@ConditionOnClass(&quot;redis.clients.jedis.Jedis&quot;)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>ConditionalOnProperty 值存在才会创建Bean</li>
</ol>
<p><strong>UserConfig</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @@Bean</span><br><span class="line">    @ConditionalOnProperty(name &#x3D; &quot;test&quot;,havingValue &#x3D; &quot;111&quot;)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot自动配置中存在各类不同触发条件下的ConditionalOn*</p>
<br>

<h2 id="二、Enable"><a href="#二、Enable" class="headerlink" title="二、Enable"></a><strong>二、Enable</strong></h2><p>动态启用某些功能，底层使用@Import注解导入配置类，实现Bean的动态加载。</p>
<br>

<p>SpringBoot不能直接获取第三方工程的Bean，原因是在@SpringBootApplication中存在@ComponentScan注解，其扫描的范围只有当前引导类所在的包及其子包。</p>
<ol>
<li>使用@ComponentScan添加对应的第三方包名(不常用)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(&quot;com.demo.config&quot;)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可以使用@Import注解加载类，这些类都会被Spring创建，并放入IOC容器(不常用)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(Userconfig.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以对Import注解进行封装</li>
</ol>
<p><strong>EnableUser</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import(UserConfig.class)</span><br><span class="line">public @interface EnableUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableUser</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、-Import注解"><a href="#三、-Import注解" class="headerlink" title="三、@Import注解"></a><strong>三、@Import注解</strong></h2><p>@Import的四种用法</p>
<ol>
<li>导入Bean</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(User.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入配置类</li>
</ol>
<p><strong>UserConfig</strong> 可不加@Configuration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public User user() &#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Role role() &#123;</span><br><span class="line">        return new Role();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(UserConfig.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>导入ImportSelector的实现类</li>
</ol>
<p><strong>ImportSelector</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.ImportSelector;</span><br><span class="line">import org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line">public class MyImportSelector implements ImportSelector &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        return new String[]&#123;&quot;com.demo.domain.User&quot;, &quot;com.demo.domain.Role&quot;&#125;;</span><br><span class="line">        &#x2F;&#x2F; 可以写在配置文件里</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(MyImportSelector.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>导入ImportBeanDefinitionRegistrar实现类</li>
</ol>
<p><strong>MyImportBeanDefinitionRegistrar</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line">public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        AbstractBeanDefinition beanDefinition &#x3D; BeanDefinitionBuilder.rootBeanDefinition(User.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(&quot;user&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="四、-EnableAutoConfiguration注解"><a href="#四、-EnableAutoConfiguration注解" class="headerlink" title="四、@EnableAutoConfiguration注解"></a><strong>四、@EnableAutoConfiguration注解</strong></h2><p>在@SpringBootApplication中有注解@EnableAutoConfiguration，其中有@Import({AutoConfigurationImportSelector.class})，使用了上一节中的第三种方式</p>
<p><strong>EnableAutoConfiguration</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY &#x3D; &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AutoConfigurationImportSelector</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!this.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata &#x3D; AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);</span><br><span class="line">        AutoConfigurationEntry autoConfigurationEntry &#x3D; this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>其中getAutoConfigurationEntry中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!this.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return EMPTY_ENTRY;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        AnnotationAttributes attributes &#x3D; this.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations &#x3D; this.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions &#x3D; this.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        this.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations &#x3D; this.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        this.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        return new AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中getCandidateConfigurations中，通过SpringFactoriesLoader加载，加载内容在<strong>META-INF/spring.factories</strong>，没有则会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    List&lt;String&gt; configurations &#x3D; SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF&#x2F;spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如下图所示一个spring.factories文件</p>
<p><img src="https://i.imgtg.com/2023/03/13/fPMfa.png" alt="fPMfa.png"></p>
<p>其中比如RedisAutoConfiguration，通过ConditionalOnClass等条件注解控制相关Bean的加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span><br><span class="line">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span><br><span class="line">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span><br><span class="line">public class RedisAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<ul>
<li>@EnableAutoConfiguration注解内部使用@Import({AutoConfigurationImportSelector.class})加载配置类</li>
<li>其配置文件位于META-INF/spring.factories中，当SpringBoot启动时会自动加载</li>
<li>但是并不是所有的Bean都会被初始化，只有满足Condition条件的Bean才会被加载</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2解决authorization跨域问题</title>
    <url>/2020/08/23/Apache/Apache2%E8%A7%A3%E5%86%B3authorization%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<div class="note default">
            <p>问题描述：前端在请求头中发送的Authorization字段消失不见，报跨域错误而跨域配置无误</p><p>环境：<br>系统：Ubuntu18.04<br>版本：Apache2.4 python3.6</p>
          </div>


<a id="more"></a>

<br>

<ol>
<li><p>修改apache2配置文件，默认位于 /etc/apache2/sites-available/，软链接到sites-enabled文件夹才会生效</p>
<p>添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule headers_module &#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_headers.so # 跨域用mod</span><br><span class="line">Header always set Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">Header always set Access-Control-Allow-Methods &quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><br><span class="line">Header always set Access-Control-Allow-Headers &quot;authorization,content-type&quot;</span><br><span class="line"># 上面为跨域配置</span><br><span class="line">WSGIPassAuthorization On # 请求头中允许authorization发送</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2部署flask</title>
    <url>/2020/08/23/Apache/Apache2%E9%83%A8%E7%BD%B2flask/</url>
    <content><![CDATA[<div class="note default">
            <p>环境：<br>系统：Ubuntu18.04<br>版本：Apache2.4 python3.6</p>
          </div>

<a id="more"></a>

<ol>
<li><p>安装apache2和wsgi模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br><span class="line">$ sudo apt-get install libapache2-mod-wsgi-py3</span><br></pre></td></tr></table></figure>

<p>安装完成后访问80端口，出现初始页面代表apache2安装成功</p>
</li>
<li><p>在项目根目录下新建wsgi配置文件，范例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import site</span><br><span class="line">site.addsitedir(&#39;&#x2F;home&#x2F;zzy&#x2F;xgkxflask&#x2F;venv&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#39;) # 项目的环境配置</span><br><span class="line">import sys       </span><br><span class="line">sys.path.insert(0, &#39;&#x2F;home&#x2F;zzy&#x2F;xgkxflask&#39;) # 项目根目录</span><br><span class="line">from flasky import app as application # 启动文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置apache2配置文件，默认位于 /etc/apache2/sites-available/，默认配置为000-default.conf，可自行配置，软链接到sites-enabled文件夹才会生效，范例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;VirtualHost *:80&gt; # 应用的端口</span><br><span class="line"># The ServerName directive sets the request scheme, hostname and port that</span><br><span class="line">  	# the server uses to identify itself. This is used when creating</span><br><span class="line">  	# redirection URLs. In the context of virtual hosts, the ServerName</span><br><span class="line">  	# specifies what hostname must appear in the request&#39;s Host: header to</span><br><span class="line">  	# match this virtual host. For the default virtual host (this file) this</span><br><span class="line">  	# value is not decisive as it is used as a last resort host regardless.</span><br><span class="line">  	# However, you must set it for any further virtual host explicitly.</span><br><span class="line">  	ServerName trueoctopus.com # 绑定的域名</span><br><span class="line">  </span><br><span class="line">  	ServerAdmin xgkx@hgu.edu.cn # 管理员联系方式，出错时会显示在报错内容中</span><br><span class="line">  	DocumentRoot &#x2F;home&#x2F;zzy&#x2F;xgkxflask # 网站根目录</span><br><span class="line">  	</span><br><span class="line">  	LoadModule headers_module &#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_headers.so # 跨域用mod</span><br><span class="line">          Header always set Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">          Header always set Access-Control-Allow-Methods &quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><br><span class="line">  	Header always set Access-Control-Allow-Headers &quot;authorization,content-type&quot;</span><br><span class="line">  	# 上面为跨域配置</span><br><span class="line">  </span><br><span class="line">  	WSGIDaemonProcess xgkxflask user&#x3D;zzy group&#x3D;zzy processes&#x3D;4 threads&#x3D;4 </span><br><span class="line">  	# 进程配置 用户不得为root用户，processes为进程 threads为线程</span><br><span class="line">  	WSGIScriptAlias &#x2F; &#x2F;home&#x2F;zzy&#x2F;xgkxflask&#x2F;xgkxflask.wsgi</span><br><span class="line">      	# wsgi配置文件地址，将IP:端口&#x2F;下的请求转发至项目位置</span><br><span class="line">  	WSGIPassAuthorization On # 请求头中允许authorization发送</span><br><span class="line">  </span><br><span class="line">  	&lt;Directory &#x2F;home&#x2F;zzy&#x2F;xgkxflask&gt; # 项目地址</span><br><span class="line">  	WSGIProcessGroup xgkxflask #项目名</span><br><span class="line">  	WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">  	</span><br><span class="line">  	#权限设置</span><br><span class="line">          Order allow,deny</span><br><span class="line">          Allow from all</span><br><span class="line">  	Require all granted</span><br><span class="line">  	&lt;&#x2F;Directory&gt;</span><br><span class="line">  </span><br><span class="line">  	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span><br><span class="line">  	# error, crit, alert, emerg.</span><br><span class="line">  	# It is also possible to configure the loglevel for particular</span><br><span class="line">  	# modules, e.g.</span><br><span class="line">  	#LogLevel info ssl:warn</span><br><span class="line">  	</span><br><span class="line">  	# 日志位置</span><br><span class="line">  	ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log </span><br><span class="line">  	CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line">  </span><br><span class="line">  	# For most configuration files from conf-available&#x2F;, which are</span><br><span class="line">  	# enabled or disabled at a global level, it is possible to</span><br><span class="line">  	# include a line for only one particular virtual host. For example the</span><br><span class="line">  	# following line enables the CGI configuration for this host only</span><br><span class="line">  	# after it has been globally disabled with &quot;a2disconf&quot;.</span><br><span class="line">  	#Include conf-available&#x2F;serve-cgi-bin.conf</span><br><span class="line">  &lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在ports.conf中配置端口，位于/etc/apache2下，服务器安全组需开放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">Listen 8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Flask+Apache2邮箱前端验证问题</title>
    <url>/2020/07/29/Apache/%E8%A7%A3%E5%86%B3Flask+Apache2%E9%82%AE%E7%AE%B1%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在apache上配置flask时可能出现如图所示的email-validator模块丢失问题 </p>
<br>

<p><img src="https://s1.ax1x.com/2020/07/29/amMFmj.png" alt="amMFmj.png"></p>
<a id="more"></a>

<p>如果已经安装了这个模块但是仍然报错时，可能是由于flask与Apache模块间的兼容问题，这时需要调整以下几个模块的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flask-WTF&#x3D;&#x3D;0.14.2</span><br><span class="line">WTForms&#x3D;&#x3D;2.1</span><br><span class="line">Werkzeug&#x3D;&#x3D;0.16.0</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：此处为我配置成功的版本，不代表其他更高版本的模块不可用，可自行尝试</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2解决中文编码问题</title>
    <url>/2020/07/29/Apache/Apache2%E8%A7%A3%E5%86%B3%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>修改 /usr/lib/python2.7/ 下的 site.py 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site.py</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<ol start="2">
<li><p>将设置解码函数内默认的ascii编码改为utf-8即可</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def setencoding():</span><br><span class="line">    &quot;&quot;&quot;Set the string encoding used by the Unicode implementation.The</span><br><span class="line">    default is &#39;ascii&#39;, but if you&#39;re willing to experiment, you can</span><br><span class="line">    change this.&quot;&quot;&quot;</span><br><span class="line">    encoding &#x3D; &quot;utf-8&quot; # 将默认编码改成utf-8即可</span><br><span class="line">    if 0:</span><br><span class="line">        # Enable to support locale aware default string encodings.</span><br><span class="line">        import locale</span><br><span class="line">        loc &#x3D; locale.getdefaultlocale()</span><br><span class="line">        if loc[1]:</span><br><span class="line">            encoding &#x3D; loc[1]</span><br><span class="line">    if 0:</span><br><span class="line">        # Enable to switch off string to Unicode coercion and implicit</span><br><span class="line">        # Unicode to string conversion.</span><br><span class="line">        encoding &#x3D; &quot;undefined&quot;</span><br><span class="line">    if encoding !&#x3D; &quot;ascii&quot;:</span><br><span class="line">        # On Non-Unicode builds this will raise an AttributeError...</span><br><span class="line">        sys.setdefaultencoding(encoding) # Needs Python Unicode build !</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Tensorflow-gpu</title>
    <url>/2020/03/22/%E5%85%B6%E4%BB%96/Ubuntu%E5%AE%89%E8%A3%85Tensorflow-gpu/</url>
    <content><![CDATA[<div class="note default">
            <p>环境：<br>系统：Ubuntu18.04<br>GPU：GTXm1050ti<br>显卡驱动：440<br>CUDA：10.1<br>Cudnn：7.6.5<br>Tensorflow-gpu：2.1.0</p><p>Tensorflow官网：<a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">https://tensorflow.google.cn/</a></p>
          </div>

<a id="more"></a>

<h1 id="显卡驱动的安装"><a href="#显卡驱动的安装" class="headerlink" title="显卡驱动的安装"></a>显卡驱动的安装</h1><p>（以gtx1050ti为例）</p>
<h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><ol>
<li><p>在软件与更新中的附加驱动中直接选择版本安装，最方便但是问题很多，还有可能失败，不推荐</p>
</li>
<li><p><strong>添加ppa源安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:graphics-drivers&#x2F;ppa</span><br><span class="line"># 更新</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ubuntu-drivers devices # 显示可安装驱动版本,然后选择其中的一个版本安装</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/21/8hND0g.png" alt="8hND0g.png"></p>
</li>
</ol>
<p>   随后选择安装440版本的驱动</p>
<p>   <strong>注意：</strong>这里有两种安装方式，效果是一样的</p>
<p>   第一种是输入命令行，第二种是在软件与更新中的附加驱动中选择版本安装</p>
<p>   这里以第一种方式为例，第二种方式的操作类似</p>
   <br>

<p>   输入以下命令</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nvidia-driver-440</span><br></pre></td></tr></table></figure>

<p>   之后会出现如图所示的安装界面，这里让你设置安全启动的密码（需要英文加数字的形式）</p>
<p>   <img src="https://s1.ax1x.com/2020/03/21/8hNxBD.png" alt="8hNxBD.png"></p>
<p>   <img src="https://s1.ax1x.com/2020/03/21/8hUpAH.png" alt="8hUpAH.png"></p>
<p>   设置完毕后，重启电脑，将会出现如下界面</p>
<p>   <a href="https://imgchr.com/i/85toS1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/22/85toS1.jpg" alt="85toS1.jpg"></a></p>
<p>   选择第二项，Enroll MOK</p>
<p>   <img src="https://s1.ax1x.com/2020/03/22/85tWo4.jpg" alt="85tWo4.jpg"></p>
<p>   选择第二项，Continue</p>
<p>   <img src="https://s1.ax1x.com/2020/03/22/85t5WR.jpg" alt="85t5WR.jpg"></p>
<p>   选择yes，并输入你的密码，随后将会跳转回第一个界面，选择Continue boot，重启电脑</p>
<ol start="3">
<li><p><strong>使用官方下载的驱动进行安装</strong></p>
<p>过程较为复杂，这里就不演示了</p>
<p>详见：<a href="https://blog.csdn.net/u014797226/article/details/79626693" target="_blank" rel="noopener">https://blog.csdn.net/u014797226/article/details/79626693</a></p>
<p>官网：<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">http://www.nvidia.cn/Download/index.aspx?lang=cn</a></p>
<br>

<p>采用上述方法安装完成后进入系统后，输入以下命令</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure>

<p>   如果出现如图所示的界面，说明安装成功！</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hN5BF.png" alt="8hN5BF.png"></p>
<p>   <strong>注意：</strong>右上角的CUDA Version为当前驱动最高支持的CUDA版本，向下兼容，在之后安装CUDA toolkit时需要留意版本是否支持</p>
<br>

<h1 id="安装CUDA-Toolkit"><a href="#安装CUDA-Toolkit" class="headerlink" title="安装CUDA Toolkit"></a>安装CUDA Toolkit</h1><p>使用官网安装，注意版本和选项别选错，这里我选择的是10.1，试过10.2发现无法使用GPU</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUC4A.png" alt="8hUC4A.png"></p>
<p>下方有官方说明的安装方法，下载完成后，输入如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_10.1.168_418.67_linux.run # 这里填你的文件名</span><br></pre></td></tr></table></figure>

<p>稍等之后，出现如下界面</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU2UH.png" alt="8hU2UH.png"></p>
<p>输入accept，回车</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUR5d.png" alt="8hUR5d.png"></p>
<p><strong>注意：</strong>在这里用回车取消驱动选项，因为你已经装好了，使用cuda也是可以安装驱动的，但我试过</p>
<p>之后添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~&#x2F;.bashrc # 这里使用的是gedit，换成其他的也行</span><br><span class="line"># 在文件末输入，注意更改你的CUDA版本号，确保匹配</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;lib64</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;bin</span><br><span class="line">export CUDA_HOME&#x3D;$CUDA_HOME:&#x2F;usr&#x2F;local&#x2F;cuda-10.1</span><br><span class="line"># 使环境变量生效</span><br><span class="line">$ source ~&#x2F;.bashrc</span><br><span class="line"># 判断是否安装成功</span><br><span class="line">$ nvcc –version</span><br></pre></td></tr></table></figure>

<p>出现如图所示，即为安装成功</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU5xP.png" alt="8hU5xP.png"></p>
<br>

<h1 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h1><p>官网下载：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a></p>
<p>下载对应cuda版本的cudnn文件，这里我选择的是7.6.5对应cuda10.1，点击第三个进行下载</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUDv6.png" alt="8hUDv6.png"></p>
<p>下载完成后进行解压，会有一个名为cuda的文件夹，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;</span><br><span class="line">$ sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;</span><br><span class="line">$ sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h</span><br><span class="line">$ sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*</span><br></pre></td></tr></table></figure>

<p>查看cudnn版本，检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>

<p>如出现如图所示，则安装成功</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUTr8.png" alt="8hUTr8.png"></p>
<br>

<h1 id="安装Tensorflow-gpu"><a href="#安装Tensorflow-gpu" class="headerlink" title="安装Tensorflow-gpu"></a>安装Tensorflow-gpu</h1><p>官方网址GPU支持：<a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">https://tensorflow.google.cn/install/gpu</a></p>
<p>官网有全部的安装过程，包括驱动、cuda的安装，反正我是没成功过</p>
<p>首先可以更新下pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>随后使用pip进行安装，建议在虚拟环境下安装，速度慢的可以给<a href="https://trueoctopus.top/2020/03/19/更新pip及pip换源/" target="_blank" rel="noopener">pip换源</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)$ pip install tensorflow-gpu # 默认安装最新版</span><br><span class="line">(venv)$ pip install tensorflow-gpu&#x3D;&#x3D;2.0.0 # 可选择版本安装</span><br></pre></td></tr></table></figure>

<p>检验是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3                     # 进入python3</span><br><span class="line">&gt;&gt;&gt;import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt;tf.test.is_gpu_available() # 如果显示true说明安装成功，可以使用gpu</span><br></pre></td></tr></table></figure>

<p>如图</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU7qS.png" alt="8hU7qS.png"></p>
<p><strong>注意：</strong>如果在引入tensorflow的时候出现一堆提示，请忽视，一般多为一些警告，不影响使用，只要最后能用就行</p>
<p>就此，大功告成，可喜可贺，可喜可贺！</p>
<br>

<h3 id="win10上的安装"><a href="#win10上的安装" class="headerlink" title="win10上的安装"></a>win10上的安装</h3><p>最后说一句，最方便的其实是，安装完驱动后，使用Anaconda3安装tensorflow-gpu，一条命令，帮你把之后所有的事情都解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base)$ conda install tensorflow-gpu</span><br></pre></td></tr></table></figure>

<p>但是，Anaconda3在我的电脑，我的Ubuntu系统中总是会崩溃，并且带崩我的整个系统，原因不知，搞崩两次了都</p>
<p>所以，这个方法建议是在win平台上搭建时使用的</p>
]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令行设置关闭盖子不休眠</title>
    <url>/2020/03/20/%E5%85%B6%E4%BB%96/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%AD%E7%9B%96%E5%AD%90%E4%B8%8D%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<div class="note info">
            <p>之前使用老笔记本制作nas时，将笔记本合上后会断连，所以需要使用命令行设置关闭盖子不休眠</p>
          </div>

<a id="more"></a>
<br>

<p><strong>方法：</strong><br>打开文件：/etc/systemd/logind.conf，并修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#HandleLidSwitch    合上笔记本盖后的行为，suspend改为ignore（即合盖不休眠）</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 在原文件中，还要去掉前面的#来取消注释<br><br><br>在这个文件中还有一些相关的值可以修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#HandlePowerKey     按下电源键后的行为，默认power off</span><br><span class="line">#HandleSleepKey     按下挂起键后的行为，默认suspend</span><br><span class="line">#HandleHibernateKey 按下休眠键后的行为，默认hibernate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>OMV-Extras安装脚本</title>
    <url>/2020/03/20/%E5%85%B6%E4%BB%96/OMV-Extras%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h2><p>一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -O - https:&#x2F;&#x2F;github.com&#x2F;OpenMediaVault-Plugin-Developers&#x2F;packages&#x2F;raw&#x2F;master&#x2F;install | bash</span><br></pre></td></tr></table></figure>
<p>二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install dirmngr</span><br><span class="line"># 下载安装包</span><br><span class="line">$ wget http:&#x2F;&#x2F;omv-extras.org&#x2F;openmediavault-omvextrasorg_latest_all4.deb</span><br><span class="line"># 安装</span><br><span class="line">$ dpkg -i openmediavault-omvextrasorg_latest_all4.deb</span><br><span class="line"># 更新</span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>


<a id="more"></a>

]]></content>
      <categories>
        <category>OMV</category>
      </categories>
      <tags>
        <tag>OMV</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>引导优先级更改</title>
    <url>/2020/03/20/%E5%85%B6%E4%BB%96/%E5%BC%95%E5%AF%BC%E4%BC%98%E5%85%88%E7%BA%A7%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<h2 id="调整引导优先级方法："><a href="#调整引导优先级方法：" class="headerlink" title="调整引导优先级方法："></a>调整引导优先级方法：</h2><ol>
<li><p>开机进Bios系统，比如联想、Dell电脑F2进，不同电脑进Bios方式不同，具体需自行查阅</p>
</li>
<li><p>在Bios中进入Boot菜单</p>
</li>
<li><p>在Boot菜单下使用F5或F6调整启动优先</p>
</li>
<li><p>注意：当EFI与Legacy两种启动方式同时存在时，可在Boot Priority选项中选择两种启动方式的优先级</p>
</li>
<li><p>按F10保存并退出</p>
</li>
</ol>
<a id="more"></a>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>解决electron-ssr无法使用问题</title>
    <url>/2020/03/20/%E5%85%B6%E4%BB%96/%E8%A7%A3%E5%86%B3electron-ssr%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>大概是因为这个软件基于Python2，然后软连接挂了，或者是没安装python，确认安装完成后输入以下命令，重启软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果提示已存在，把原有的删去重新建一个</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows快捷键列表</title>
    <url>/2020/03/20/%E5%85%B6%E4%BB%96/Windows%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="常用的Windows快捷键"><a href="#常用的Windows快捷键" class="headerlink" title="常用的Windows快捷键"></a>常用的Windows快捷键</h1><h2 id="Ctrl键功能"><a href="#Ctrl键功能" class="headerlink" title="Ctrl键功能"></a>Ctrl键功能</h2><ol>
<li><p>Ctrl S 保存　</p>
</li>
<li><p>Ctrl W 关闭程序</p>
</li>
<li><p>Ctrl N 新建</p>
</li>
<li><p>Ctrl O 打开　　</p>
</li>
<li><p>Ctrl Z 撤销　　</p>
</li>
<li><p>Ctrl F 查找　　</p>
</li>
<li><p>Ctrl X 剪切　　</p>
</li>
<li><p>Ctrl C 复制　　</p>
</li>
<li><p>Ctrl V 粘贴　　</p>
</li>
<li><p>Ctrl A 全选　　</p>
</li>
</ol>
<a id="more"></a>

<ol start="11">
<li><p>Ctrl [ 缩小文字　　</p>
</li>
<li><p>Ctrl ] 放大文字　　</p>
</li>
<li><p>Ctrl B 粗体　　</p>
</li>
<li><p>Ctrl I 斜体　　</p>
</li>
<li><p>Ctrl U 下划线　　</p>
</li>
<li><p>Ctrl Shift 输入法切换　　</p>
</li>
<li><p>Ctrl 空格 中英文切换　　</p>
</li>
<li><p>Ctrl 回车 QQ号中发送信息</p>
</li>
<li><p>Ctrl Home 光标快速移到文件头</p>
</li>
<li><p>Ctrl End 光标快速移到文件尾</p>
</li>
<li><p>Ctrl Esc 显示开始菜单　　</p>
</li>
<li><p>Ctrl Shift &lt; 快速缩小文字</p>
</li>
<li><p>Ctrl Shift &gt; 快速放大文字　　</p>
</li>
<li><p>Ctrl F5 在IE中强行刷新　　</p>
</li>
<li><p>Ctrl 拖动文件 复制文件</p>
</li>
<li><p>Ctrl Backspace 启动\关闭输入法</p>
</li>
<li><p>拖动文件时按住Ctrl Shift 创建快捷方式</p>
</li>
</ol>
<h2 id="Alt功能"><a href="#Alt功能" class="headerlink" title="Alt功能"></a>Alt功能</h2><ol>
<li><p>Alt 空格 C 关闭窗口</p>
</li>
<li><p>Alt 空格 N 最小化当前窗口</p>
</li>
<li><p>Alt 空格 R 恢复最小化窗口</p>
</li>
<li><p>Alt 空格 X 最大化当前窗口</p>
</li>
<li><p>Alt 空格 M 移动窗口</p>
</li>
<li><p>Alt 空格 S 改变窗口大小</p>
</li>
<li><p>Alt Tab 两个程序交换</p>
</li>
<li><p>Alt 255 QQ号中输入无名人</p>
</li>
<li><p>Alt F 打开文件菜单</p>
</li>
<li><p>Alt V 打开视图菜单</p>
</li>
<li><p>Alt E 打开编辑菜单</p>
</li>
<li><p>Alt I 打开插入菜单</p>
</li>
<li><p>Alt O 打开格式菜单</p>
</li>
<li><p>Alt T 打开工具菜单</p>
</li>
<li><p>Alt A 打开表格菜单</p>
</li>
<li><p>Alt W 打开窗口菜单</p>
</li>
<li><p>Alt H 打开帮助菜单</p>
</li>
<li><p>Alt 回车 查看文件属性</p>
</li>
<li><p>Alt 双击文件 查看文件属性</p>
</li>
<li><p>Alt X 关闭C语言</p>
</li>
</ol>
<h2 id="Shift快捷键"><a href="#Shift快捷键" class="headerlink" title="Shift快捷键"></a>Shift快捷键</h2><ol>
<li><p>Shift 空格 半\全角切换</p>
</li>
<li><p>Shift Delete 永久删除所选项，而不将它放到“回收站”中。　</p>
</li>
<li><p>拖动某一项时按 CTRL 复制所选项。</p>
</li>
<li><p>拖动某一项时按 CTRL SHIFT创建所选项目的快捷键。</p>
</li>
</ol>
<h2 id="winkey快捷键"><a href="#winkey快捷键" class="headerlink" title="winkey快捷键"></a>winkey快捷键</h2><ol>
<li><p>winkey D ：最小化桌面上的所有窗口，无论是聊天的窗口还是游戏的窗口</p>
</li>
<li><p>winkey I：打开windows设置</p>
</li>
<li><p>winkey E：打开文件资源管理器</p>
</li>
<li><p>winkey A：打开操作中心</p>
</li>
<li><p>winkey C：打开Cortana</p>
</li>
<li><p>winkey V：打开历史剪切板（老版本不支持）</p>
</li>
<li><p>winkey S：搜索</p>
</li>
</ol>
<h2 id="WORD全套快捷键小技巧"><a href="#WORD全套快捷键小技巧" class="headerlink" title="WORD全套快捷键小技巧　　"></a>WORD全套快捷键小技巧　　</h2><ol>
<li><p>CTRL O 打开　　</p>
</li>
<li><p>CTRL P 打印　</p>
</li>
<li><p>CTRL A 全选　　</p>
</li>
<li><p>CTRL [/] 对文字进行大小设置（在选中目标情况下）　　</p>
</li>
<li><p>CTRL D 字体设置（在选中目标情况下）　　</p>
</li>
<li><p>CTRL G/H 查找/替换;</p>
</li>
<li><p>CTRL N 全文删除;</p>
</li>
<li><p>CTRL M 左边距（在选中目标情况下）；</p>
</li>
<li><p>CTRL U 绘制下划线（在选中目标情况下）;　　</p>
</li>
<li><p>CTRL B 加粗文字（在选中目标情况下）;</p>
</li>
<li><p>CTRL I 倾斜文字（在选中目标情况下）;</p>
</li>
<li><p>CTRL Q 两边对齐（无首行缩进），（在选中目标情况下）或将光标放置目标文字的段尾，亦可操作</p>
</li>
<li><p>CTRL J 两端对齐（操作同上）</p>
</li>
<li><p>CTRL E 居中（操作同上）</p>
</li>
<li><p>CTRL R 右对齐（操作同上）</p>
</li>
<li><p>CTRL K 插入超链接</p>
</li>
<li><p>CTRL T/Y 可进行首行缩进（将光标移到需做此操作的段尾，或将此段选中进行操作</p>
</li>
<li><p>Ctrl A（或Ctrl 小键盘上数字5）：选中全文。</p>
</li>
<li><p>Ctrl B：给选中的文字加粗（再按一次，取消加粗）。</p>
</li>
<li><p>Ctrl C：将选中的文字复制到剪贴板中。</p>
</li>
<li><p>Ctrl D：打开“字体”对话框，快速完成字体的各种设置。</p>
</li>
<li><p>Ctrl E：使光标所在行的文本居中。</p>
</li>
<li><p>Ctrl F：打开“查找与替换”对话框，并定位在“查找”标签上。</p>
</li>
<li><p>Ctrl G：打开“查找与替换”对话框，并定位在“定位”标签上。</p>
</li>
<li><p>Ctrl H：打开“查找与替换”对话框，并定位在“替换”标签上。</p>
</li>
<li><p>Ctrl I：使选中的文字倾斜（再按一次，取消倾斜）。</p>
</li>
<li><p>Ctrl K：打开“插入超链接”对话框。</p>
</li>
<li><p>Ctrl Shift L：给光标所在行的文本加上“项目符号”。</p>
</li>
<li><p>Ctrl M：同时增加首行和悬挂缩进。</p>
</li>
<li><p>Ctrl Shift M：同时减少首行和悬挂缩进。</p>
</li>
<li><p>Ctrl N：新建一个空文档。</p>
</li>
<li><p>Ctrl O（或Ctrl F12）：打开“打开”对话框。</p>
</li>
<li><p>Ctrl P（或Ctrl Shift F12）：打开“打印”对话框。　　</p>
</li>
<li><p>Ctrl R：使光标所在行的文本右对齐。　　</p>
</li>
<li><p>Ctrl S：为新文档打开“另保存为”对话框，或对当前文档进行保存。</p>
</li>
<li><p>Ctrl T：增加首行缩进。</p>
</li>
<li><p>Ctrl Shift T：减少首行缩进。</p>
</li>
<li><p>Ctrl U：给选中的文字加上下划线（再按一次，去年下划线）。</p>
</li>
<li><p>Ctrl V：将剪贴板中的文本或图片粘贴到光标处。若剪贴板中有多个内容，则将 最后一条内容粘贴到光标处。</p>
</li>
<li><p>Ctrl X：将选中的文字剪切到剪贴板中。</p>
</li>
<li><p>Ctrl Z：撤销刚才进行的操作（可以多次使用）。</p>
</li>
<li><p>Ctrl 0：将选中的文本每段前增加12磅的间距。</p>
</li>
<li><p>Ctrl 1：若选中的文本行距不是“单倍行距”，则将其快速设置为“单倍行距”。</p>
</li>
<li><p>Ctrl 2： 将选中的文本行距设置为“两倍行距”。</p>
</li>
<li><p>Ctrl 5：将选中的文本行距设置为“1.5倍行距”。</p>
</li>
<li><p>Ctrl F2：快速执行“打印预览”功能。</p>
</li>
<li><p>Ctrl F4：关闭当前文档。</p>
</li>
<li><p>Ctrl F5：使窗口还原到最大化之前的状态。</p>
</li>
<li><p>Ctrl Shift F5：打开“书签”对话框。</p>
</li>
<li><p>Ctrl Shift F8：激活列选择功能，即通常所说的选择竖块文本（再按一次或按ESC键，取消该功能）。</p>
</li>
<li><p>Ctrl F9：在光标处插入一域记号“{}”（注意：直接输入的一对大括号不能作为域记号）。</p>
</li>
<li><p>Ctrl F5：使窗口还原到最大化之前的状态（再按一次，就会使窗口再次最大化）。</p>
</li>
<li><p>Ctrl Deltet：删除光标后面的一个英文单词或一个中文词语（可反复使用）。 </p>
</li>
<li><p>Ctrl Enter：将光标后面的内容快速移到下一页。</p>
</li>
<li><p>Ctrl End：快速将光标移到文末。</p>
</li>
<li><p>Ctrl Home（或Ctrl Page Up）：快速将光标移到文首。</p>
</li>
<li><p>Ctrl Insert Insert(即按两下Insert键)：快速打开或更改“任务窗格”到“剪贴板”状态。</p>
</li>
<li><p>Ctrl ：打开中文输入法的“在线造词”功能。</p>
</li>
<li><p>Ctrl ：快速切换到下标输入状态（再按一次恢复到正常状态）。</p>
</li>
<li><p>Ctrl Shift ：快速切换到上标输入状态（再按一次恢复到正常状态）。</p>
</li>
<li><p>Ctrl →：按英文单词或中文词语的间隔向后移动光标。</p>
</li>
<li><p>Ctrl ←：按英文单词或中文词语的间隔向前移动光标。</p>
</li>
<li><p>Ctrl J：文本两端对齐</p>
</li>
<li><p>Ctrl L：文本左对齐</p>
</li>
<li><p>Ctrl Q：段落重置</p>
</li>
<li><p>Ctrl W：关闭当前文档</p>
</li>
<li><p>Ctrl Y：重复上一操作（部分操作不适用）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>更新pip及pip换源</title>
    <url>/2020/03/19/%E5%85%B6%E4%BB%96/%E6%9B%B4%E6%96%B0pip%E5%8F%8Apip%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<div class="note default">
            <p>运行环境：<br>    Ubuntu18.04</p>
          </div>

<a id="more"></a>

<h1 id="更新pip的三种方法"><a href="#更新pip的三种方法" class="headerlink" title="更新pip的三种方法"></a>更新pip的三种方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -m pip install --upgrade pip</span><br><span class="line">$ python -m pip install -U --force-reinstall pip</span><br><span class="line">$ pip install --user --upgrade pip</span><br></pre></td></tr></table></figure>

<h1 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h1><p>当使用pip安装时速度过慢可尝试使用更换为国内源的方式，但是国内源可能没有对应的安装包或没有最新的版本。<br><br></p>
<h2 id="换源的方式"><a href="#换源的方式" class="headerlink" title="换源的方式"></a>换源的方式</h2><div class="note info">
            <p>国内pip镜像源：</p><ul><li>阿里： <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a> </li><li>中国科技大学： <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a>  </li><li>豆瓣： <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a>   </li><li>清华大学： <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a>   </li><li>中国科学技术大学： <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul>
          </div>
<ol>
<li><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a><strong>临时使用</strong></h3> 例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install tensorflow -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong>-i后添加的是指定的pip源<br><br></p>
<ol start="2">
<li><h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a><strong>永久修改</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~&#x2F;.pip&#x2F;pip.conf</span><br><span class="line">修改内容如下：</span><br><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong>index-url后填写的是指定的pip源，当没有pip.conf时请自行在对应位置创建文件，这里使用的文本编辑器是gedit，目标文件不存在的话会自行创建。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>pip</tag>
      </tags>
  </entry>
</search>
