<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MP条件构造器</title>
    <url>/2023/03/16/MP%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h1><br>
具体见官网文档：

<p><a href="https://baomidou.com/pages/10c804/#abstractwrapper" target="_blank" rel="noopener">条件构造器</a><br><br></p>
<ul>
<li><strong>allEq</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testAllEq()&#123;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; params &#x3D; new HashMap&lt;&gt;();  </span><br><span class="line">    params.put(&quot;name&quot;, &quot;李四&quot;);  </span><br><span class="line">    params.put(&quot;age&quot;, &quot;20&quot;);  </span><br><span class="line">    params.put(&quot;password&quot;, null);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE password IS NULL AND name &#x3D; ? AND age &#x3D; ?  </span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq(params);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? AND age &#x3D; ?</span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq(params, false);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE age &#x3D; ?</span><br><span class="line">    &#x2F;&#x2F;wrapper.allEq((k, v) -&gt; (k.equals(&quot;age&quot;) || k.equals(&quot;id&quot;)) , params);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? AND age &#x3D; ?</span><br><span class="line">    wrapper.allEq((k, v) -&gt; (k.equals(&quot;age&quot;) || k.equals(&quot;id&quot;) || k.equals(&quot;name&quot;)) , params);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>like</strong> %值%</p>
</li>
<li><p><strong>notLike</strong> %值% 取反</p>
</li>
<li><p><strong>likeLeft</strong> %值</p>
</li>
<li><p><strong>likeRight</strong> 值%</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testLike()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F; SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name LIKE ?  </span><br><span class="line">    &#x2F;&#x2F; 参数：%五(String)  </span><br><span class="line">    wrapper.likeLeft(&quot;name&quot;, &quot;五&quot;);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>or</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testOr()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F; SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name &#x3D; ? OR age &#x3D; ?  </span><br><span class="line">    wrapper.eq(&quot;name&quot;, &quot;王五&quot;).or().eq(&quot;age&quot;, 21);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>select部分</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelect()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;SELECT id,name,age FROM tb_user WHERE name &#x3D; ? OR age &#x3D; ?  </span><br><span class="line">    wrapper.eq(&quot;name&quot;, &quot;王五&quot;)  </span><br><span class="line">            .or()  </span><br><span class="line">            .eq(&quot;age&quot;, 21)  </span><br><span class="line">            .select(&quot;id&quot;,&quot;name&quot;,&quot;age&quot;); &#x2F;&#x2F;指定查询的字段  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus配置项</title>
    <url>/2023/03/16/MybatisPlus%E9%85%8D%E7%BD%AE%E9%A1%B9/</url>
    <content><![CDATA[<h3 id="常用的MybatisPlus配置项"><a href="#常用的MybatisPlus配置项" class="headerlink" title="常用的MybatisPlus配置项"></a>常用的MybatisPlus配置项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定全局的配置文件</span><br><span class="line">mybatis-plus.config-location&#x3D;classpath:mybatis-config.xml</span><br><span class="line"></span><br><span class="line"># 指定Mapper.xml文件的路径</span><br><span class="line">mybatis-plus.mapper-locations &#x3D; classpath*:mybatis&#x2F;*.xml</span><br><span class="line"></span><br><span class="line"># 实体对象的扫描包</span><br><span class="line">mybatis-plus.type-aliases-package &#x3D; cn.itcast.mp.pojo</span><br><span class="line"></span><br><span class="line"># 禁用自定的驼峰映射</span><br><span class="line">#mybatis-plus.configuration.map-underscore-to-camel-case&#x3D;true</span><br><span class="line"></span><br><span class="line"># 禁用缓存</span><br><span class="line">#mybatis-plus.configuration.cache-enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># 全局的id生成策略</span><br><span class="line">#mybatis-plus.global-config.db-config.id-type&#x3D;input</span><br><span class="line">mybatis-plus.global-config.db-config.id-type&#x3D;auto</span><br><span class="line"></span><br><span class="line"># 全局的表名的前缀</span><br><span class="line">mybatis-plus.global-config.db-config.table-prefix&#x3D;tb_</span><br><span class="line"></span><br><span class="line"># 删除状态的值为：1</span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-value&#x3D;1</span><br><span class="line"></span><br><span class="line"># 未删除状态的值为：0</span><br><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value&#x3D;0</span><br><span class="line"></span><br><span class="line"># 枚举包扫描</span><br><span class="line">mybatis-plus.type-enums-package&#x3D;cn.itcast.mp.enums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus的CRUD操作</title>
    <url>/2023/03/15/MybatisPlus%E7%9A%84CRUD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MybatisPlus的CRUD操作"><a href="#MybatisPlus的CRUD操作" class="headerlink" title="MybatisPlus的CRUD操作"></a>MybatisPlus的CRUD操作</h1><br>
在继承MP的BaseMapper后已经有了基本的操作：

<p><img src="https://i.imgtg.com/2023/03/15/fwB86.png" alt="fwB86.png"></p>
<p>返回值为int，指受影响的数据条数。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a><strong>插入</strong></h3><p>设定id策略@TableId</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableId(type &#x3D; IdType.AUTO) &#x2F;&#x2F;通过添加注解改变MP的id策略</span><br><span class="line"></span><br><span class="line">AUTO(0),  &#x2F;&#x2F;id自增</span><br><span class="line">NONE(1),  &#x2F;&#x2F;未设置主键类型</span><br><span class="line">INPUT(2), &#x2F;&#x2F;用户输入id，可通过自己注册自动填充插件进行填充</span><br><span class="line">&#x2F;&#x2F;以下类型只有当插入id为空时才会自动填充</span><br><span class="line">ID_WORKER(3),  &#x2F;&#x2F;全局唯一id（idWorker）</span><br><span class="line">UUID(4),  &#x2F;&#x2F;全局唯一id（UUID）</span><br><span class="line">ID_WORKER_STR(5); &#x2F;&#x2F;字符串全局唯一id（idWorker的字符串表示）</span><br></pre></td></tr></table></figure>

<p>指定字段属性@TableField</p>
<p>1、解决属性名和字段名不一致的问题</p>
<p>2、解决属性字段在表中不存在的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TableField(value &#x3D; &quot;email&quot;) &#x2F;&#x2F;指定数据表中字段名  </span><br><span class="line">private String mail;  </span><br><span class="line">  </span><br><span class="line">@TableField(exist &#x3D; false)  </span><br><span class="line">private String address; &#x2F;&#x2F;在数据库表中是不存在的</span><br><span class="line"></span><br><span class="line">@TableField(select &#x3D; false) &#x2F;&#x2F;查询时不返回该字段的值  </span><br><span class="line">private String password;</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h3><p>根据id更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testUpdateById() &#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setId(1L); &#x2F;&#x2F;条件，根据id更新  </span><br><span class="line">    user.setAge(19); &#x2F;&#x2F;更新的字段  </span><br><span class="line">    user.setPassword(&quot;666666&quot;);  </span><br><span class="line">  </span><br><span class="line">    int result &#x3D; this.userMapper.updateById(user);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testUpdate() &#123;  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setAge(20); &#x2F;&#x2F;更新的字段  </span><br><span class="line">    user.setPassword(&quot;8888888&quot;);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.eq(&quot;user_name&quot;, &quot;zhangsan&quot;); &#x2F;&#x2F;匹配user_name &#x3D; zhangsan 的用户数据  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;根据条件做更新  </span><br><span class="line">    int result &#x3D; this.userMapper.update(user, wrapper);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void testUpdate2() &#123;  </span><br><span class="line">  </span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper &#x3D; new UpdateWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.set(&quot;age&quot;, 21).set(&quot;password&quot;, &quot;999999&quot;) &#x2F;&#x2F;更新的字段  </span><br><span class="line">    .eq(&quot;user_name&quot;, &quot;zhangsan&quot;); &#x2F;&#x2F;更新的条件  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;根据条件做更新  </span><br><span class="line">    int result &#x3D; this.userMapper.update(null, wrapper);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h3><p>根据id删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDeleteById()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id删除数据  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteById(2L);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDeleteByMap()&#123;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;user_name&quot;, &quot;zhangsan&quot;);  </span><br><span class="line">    map.put(&quot;password&quot;, &quot;999999&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据map删除数据，多条件之间是and关系  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteByMap(map); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据包装条件删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testDelete()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;用法一：  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.eq(&quot;user_name&quot;, &quot;caocao1&quot;)  </span><br><span class="line">	        .eq(&quot;password&quot;, &quot;123456&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;用法二：  </span><br><span class="line">    User user &#x3D; new User();  </span><br><span class="line">    user.setPassword(&quot;123456&quot;);  </span><br><span class="line">    user.setUserName(&quot;caocao&quot;);  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;(user);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据包装条件做删除  </span><br><span class="line">    int result &#x3D; this.userMapper.delete(wrapper);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据id批量删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void  testDeleteBatchIds()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id批量删除数据  </span><br><span class="line">    int result &#x3D; this.userMapper.deleteBatchIds(Arrays.asList(10L, 11L));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h3><p>根据id查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectById() &#123;  </span><br><span class="line">    User user &#x3D; this.userMapper.selectById(2L);  </span><br><span class="line">    System.out.println(user);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据id批量查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectBatchIds()&#123;  </span><br><span class="line">    &#x2F;&#x2F; 根据id批量查询数据  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectBatchIds(Arrays.asList(2L, 3L, 4L, 100L));  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询一条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectOne()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;查询条件  </span><br><span class="line">    wrapper.eq(&quot;password&quot;, &quot;123456&quot;);  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 查询的数据超过一条时，会抛出异常  </span><br><span class="line">    User user &#x3D; this.userMapper.selectOne(wrapper);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件查询数据条数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectCount()&#123;  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    wrapper.gt(&quot;age&quot;, 20); &#x2F;&#x2F; 条件：年龄大于20岁的用户  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 根据条件查询数据条数  </span><br><span class="line">    Integer count &#x3D; this.userMapper.selectCount(wrapper);  </span><br><span class="line">    System.out.println(&quot;count &#x3D;&gt; &quot; + count);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询多条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectList()&#123;  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;设置查询条件  </span><br><span class="line">    wrapper.like(&quot;email&quot;, &quot;itcast&quot;);  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; users &#x3D; this.userMapper.selectList(wrapper);  </span><br><span class="line">    for (User user : users) &#123;  </span><br><span class="line">        System.out.println(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页查询</p>
<p>MybatisPlusConfig.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">@MapperScan(&quot;cn.itcast.mp.mapper&quot;) &#x2F;&#x2F;设置mapper接口的扫描包  </span><br><span class="line">public class MybatisPlusConfig &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Bean &#x2F;&#x2F;配置分页插件  </span><br><span class="line">    public PaginationInterceptor paginationInterceptor()&#123;  </span><br><span class="line">        return new PaginationInterceptor();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testSelectPage()&#123;  </span><br><span class="line">  </span><br><span class="line">    Page&lt;User&gt; page &#x3D; new Page&lt;&gt;(3,1); &#x2F;&#x2F;查询第3页，查询1条数据  </span><br><span class="line">  </span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();  </span><br><span class="line">    &#x2F;&#x2F;设置查询条件  </span><br><span class="line">    wrapper.like(&quot;email&quot;, &quot;itcast&quot;);  </span><br><span class="line">  </span><br><span class="line">    IPage&lt;User&gt; iPage &#x3D; this.userMapper.selectPage(page, wrapper);  </span><br><span class="line">    System.out.println(&quot;数据总条数： &quot; + iPage.getTotal());  </span><br><span class="line">    System.out.println(&quot;数据总页数： &quot; + iPage.getPages());  </span><br><span class="line">    System.out.println(&quot;当前页数： &quot; + iPage.getCurrent());  </span><br><span class="line">  </span><br><span class="line">    List&lt;User&gt; records &#x3D; iPage.getRecords();  </span><br><span class="line">    for (User record : records) &#123;  </span><br><span class="line">        System.out.println(record);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus的整合</title>
    <url>/2023/03/14/MybatisPlus%E7%9A%84%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="MybatisPlus的整合"><a href="#MybatisPlus的整合" class="headerlink" title="MybatisPlus的整合"></a>MybatisPlus的整合</h1><h3 id="一、Spring-Mybatis-mp实现"><a href="#一、Spring-Mybatis-mp实现" class="headerlink" title="一、Spring + Mybatis + mp实现"></a>一、Spring + Mybatis + mp实现</h3><p><strong>jdbc.properties</strong>  jdbc配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver  </span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mp?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;autoReconnect&#x3D;true&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false  </span><br><span class="line">jdbc.username&#x3D;root  </span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure>

<p><strong>applicationContext.xml</strong>  Spring配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;  </span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;  </span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;  </span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans  </span><br><span class="line">      http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:*.properties&quot;&#x2F;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 定义数据源 --&gt;  </span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;  </span><br><span class="line">          destroy-method&#x3D;&quot;close&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;minIdle&quot; value&#x3D;&quot;5&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;&#x2F;bean&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;  </span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;globalConfig&quot;&gt;  </span><br><span class="line">            &lt;bean class&#x3D;&quot;com.baomidou.mybatisplus.core.config.GlobalConfig&quot;&gt;  </span><br><span class="line">                &lt;property name&#x3D;&quot;dbConfig&quot;&gt;  </span><br><span class="line">                    &lt;bean class&#x3D;&quot;com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig&quot;&gt;  </span><br><span class="line">                        &lt;property name&#x3D;&quot;idType&quot; value&#x3D;&quot;AUTO&quot;&#x2F;&gt;  </span><br><span class="line">                    &lt;&#x2F;bean&gt;</span><br><span class="line">				&lt;&#x2F;property&gt;</span><br><span class="line">			&lt;&#x2F;bean&gt;</span><br><span class="line">		&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;  </span><br><span class="line">	</span><br><span class="line">    &lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;  </span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;  </span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.itcast.mp.simple.mapper&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;&#x2F;bean&gt;  </span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p><strong>User</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.annotation.TableName;  </span><br><span class="line">import lombok.AllArgsConstructor;  </span><br><span class="line">import lombok.Data;  </span><br><span class="line">import lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line">@Data  </span><br><span class="line">@NoArgsConstructor  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">@TableName(&quot;tb_user&quot;)  </span><br><span class="line">public class User &#123;  </span><br><span class="line">  </span><br><span class="line">    private Long id;  </span><br><span class="line">    private String userName;  </span><br><span class="line">    private String password;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Integer age;  </span><br><span class="line">    private String email;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper</strong>接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cn.itcast.mp.simple.pojo.User;  </span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;  </span><br><span class="line">  </span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、SpringBoot-Mybatis-mp实现"><a href="#二、SpringBoot-Mybatis-mp实现" class="headerlink" title="二、SpringBoot + Mybatis + mp实现"></a>二、SpringBoot + Mybatis + mp实现</h3><p><strong>application.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.application.name &#x3D; itcast-mp-springboot  </span><br><span class="line">  </span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver  </span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mp?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;autoReconnect&#x3D;true&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false  </span><br><span class="line">spring.datasource.username&#x3D;root  </span><br><span class="line">spring.datasource.password&#x3D;root</span><br></pre></td></tr></table></figure>

<p><strong>pojo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.annotation.TableName;  </span><br><span class="line">import lombok.AllArgsConstructor;  </span><br><span class="line">import lombok.Data;  </span><br><span class="line">import lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line">@Data  </span><br><span class="line">@NoArgsConstructor  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">@TableName(&quot;tb_user&quot;)  </span><br><span class="line">public class User &#123;  </span><br><span class="line">  </span><br><span class="line">    private Long id;  </span><br><span class="line">    private String userName;  </span><br><span class="line">    private String password;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Integer age;  </span><br><span class="line">    private String email;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mapper</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cn.itcast.mp.pojo.User;</span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.mp; import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication; </span><br><span class="line">import org.springframework.boot.WebApplicationType; </span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication; </span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line">@MapperScan(&quot;cn.itcast.mp.mapper&quot;) &#x2F;&#x2F;设置mapper接口的扫描包</span><br><span class="line">@SpringBootApplication public class MyApplication &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(MyApplication.class, args); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动装配</title>
    <url>/2023/03/13/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<h1 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h1><h2 id="一、Conditon"><a href="#一、Conditon" class="headerlink" title="一、Conditon"></a>一、Conditon</h2><p>实现选择性创建Bean操作<br><br></p>
<ol>
<li>通过坐标是否存在从而创建Bean</li>
</ol>
<p><strong>ClassCondition:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ClassCondition implements Condition &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.需求： 导入Jedis坐标后创建Bean</span><br><span class="line">        &#x2F;&#x2F;思路：判断redis.clients.jedis.Jedis.class文件是否存在</span><br><span class="line">        boolean flag &#x3D; true;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; cls &#x3D; Class.forName(&quot;redis.clients.jedis.Jedis&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserConfig:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Conditional(ClassCondition.class)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将类的判断变为动态的判断</li>
</ol>
<p><strong>ClassCondition:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ClassCondition implements Condition &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param context 上下文对象。用于获取环境，IOC容器，ClassLoader对象</span><br><span class="line">     * @param metadata 注解元对象。 可以用于获取注解定义的属性值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.需求： 导入通过注解属性值value指定坐标后创建Bean</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取注解属性值  value</span><br><span class="line">        Map&lt;String, Object&gt; map &#x3D; metadata.getAnnotationAttributes(ConditionOnClass.class.getName());</span><br><span class="line">        String[] value &#x3D; (String[]) map.get(&quot;value&quot;);</span><br><span class="line"></span><br><span class="line">        boolean flag &#x3D; true;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (String className : value) &#123;</span><br><span class="line">                Class&lt;?&gt; cls &#x3D; Class.forName(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConditionOnClass</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Conditional(ClassCondition.class)</span><br><span class="line">public @interface ConditionOnClass &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserConfig</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @@ConditionOnClass(&quot;redis.clients.jedis.Jedis&quot;)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>ConditionalOnProperty 值存在才会创建Bean</li>
</ol>
<p><strong>UserConfig</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @@Bean</span><br><span class="line">    @ConditionalOnProperty(name &#x3D; &quot;test&quot;,havingValue &#x3D; &quot;111&quot;)</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot自动配置中存在各类不同触发条件下的ConditionalOn*<br><br/></p>
<h2 id="二、Enable"><a href="#二、Enable" class="headerlink" title="二、Enable"></a>二、Enable</h2><p>动态启用某些功能，底层使用@Import注解导入配置类，实现Bean的动态加载。</p>
<br/>

<p>SpringBoot不能直接获取第三方工程的Bean，原因是在@SpringBootApplication中存在@ComponentScan注解，其扫描的范围只有当前引导类所在的包及其子包。</p>
<ol>
<li>使用@ComponentScan添加对应的第三方包名(不常用)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(&quot;com.demo.config&quot;)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可以使用@Import注解加载类，这些类都会被Spring创建，并放入IOC容器(不常用)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(Userconfig.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以对Import注解进行封装</li>
</ol>
<p><strong>EnableUser</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import(UserConfig.class)</span><br><span class="line">public @interface EnableUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableUser</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、-Import注解"><a href="#三、-Import注解" class="headerlink" title="三、@Import注解"></a>三、@Import注解</h2><p>@Import的四种用法</p>
<ol>
<li>导入Bean</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(User.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入配置类</li>
</ol>
<p><strong>UserConfig</strong> 可不加@Configuration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public User user() &#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Role role() &#123;</span><br><span class="line">        return new Role();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(UserConfig.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>导入ImportSelector的实现类</li>
</ol>
<p><strong>ImportSelector</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.ImportSelector;</span><br><span class="line">import org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line">public class MyImportSelector implements ImportSelector &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        return new String[]&#123;&quot;com.demo.domain.User&quot;, &quot;com.demo.domain.Role&quot;&#125;;</span><br><span class="line">        &#x2F;&#x2F; 可以写在配置文件里</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(MyImportSelector.class)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>导入ImportBeanDefinitionRegistrar实现类</li>
</ol>
<p><strong>MyImportBeanDefinitionRegistrar</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line">public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        AbstractBeanDefinition beanDefinition &#x3D; BeanDefinitionBuilder.rootBeanDefinition(User.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(&quot;user&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Application</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line">public class SpringbootEnableApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<h2 id="四、-EnableAutoConfiguration注解"><a href="#四、-EnableAutoConfiguration注解" class="headerlink" title="四、@EnableAutoConfiguration注解"></a>四、@EnableAutoConfiguration注解</h2><p>在@SpringBootApplication中有注解@EnableAutoConfiguration，其中有@Import({AutoConfigurationImportSelector.class})，使用了上一节中的第三种方式</p>
<p><strong>EnableAutoConfiguration</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY &#x3D; &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AutoConfigurationImportSelector</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!this.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata &#x3D; AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);</span><br><span class="line">        AutoConfigurationEntry autoConfigurationEntry &#x3D; this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>其中getAutoConfigurationEntry中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    if (!this.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return EMPTY_ENTRY;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        AnnotationAttributes attributes &#x3D; this.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations &#x3D; this.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions &#x3D; this.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        this.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations &#x3D; this.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        this.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        return new AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中getCandidateConfigurations中，通过SpringFactoriesLoader加载，加载内容在<strong>META-INF/spring.factories</strong>，没有则会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    List&lt;String&gt; configurations &#x3D; SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF&#x2F;spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如下图所示一个spring.factories文件</p>
<p><img src="https://i.imgtg.com/2023/03/13/fPMfa.png" alt="fPMfa.png"></p>
<p>其中比如RedisAutoConfiguration，通过ConditionalOnClass等条件注解控制相关Bean的加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span><br><span class="line">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span><br><span class="line">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span><br><span class="line">public class RedisAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<ul>
<li>@EnableAutoConfiguration注解内部使用@Import({AutoConfigurationImportSelector.class})加载配置类</li>
<li>其配置文件位于META-INF/spring.factories中，当SpringBoot启动时会自动加载</li>
<li>但是并不是所有的Bean都会被初始化，只有满足Condition条件的Bean才会被加载</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2解决authorization跨域问题</title>
    <url>/2020/08/23/Apache2%E8%A7%A3%E5%86%B3authorization%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Apache2-解决authorization跨域问题"><a href="#Apache2-解决authorization跨域问题" class="headerlink" title="Apache2 解决authorization跨域问题"></a>Apache2 解决authorization跨域问题</h1><br/>

<div class="note default">
            <p>问题描述：前端在请求头中发送的Authorization字段消失不见，报跨域错误而跨域配置无误</p><p>环境：<br>系统：Ubuntu18.04<br>版本：Apache2.4 python3.6</p>
          </div>

<br/>

<ol>
<li><p>修改apache2配置文件，默认位于 /etc/apache2/sites-available/，软链接到sites-enabled文件夹才会生效</p>
<p>添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule headers_module &#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_headers.so # 跨域用mod</span><br><span class="line">Header always set Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">Header always set Access-Control-Allow-Methods &quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><br><span class="line">Header always set Access-Control-Allow-Headers &quot;authorization,content-type&quot;</span><br><span class="line"># 上面为跨域配置</span><br><span class="line">WSGIPassAuthorization On # 请求头中允许authorization发送</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2部署flask</title>
    <url>/2020/08/23/Apache2%E9%83%A8%E7%BD%B2flask/</url>
    <content><![CDATA[<div class="note default">
            <p>环境：<br>系统：Ubuntu18.04<br>版本：Apache2.4 python3.6</p>
          </div>

<h1 id="Apache2部署flask"><a href="#Apache2部署flask" class="headerlink" title="Apache2部署flask"></a>Apache2部署flask</h1><br/>

<ol>
<li><p>安装apache2和wsgi模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br><span class="line">$ sudo apt-get install libapache2-mod-wsgi-py3</span><br></pre></td></tr></table></figure>

<p>安装完成后访问80端口，出现初始页面代表apache2安装成功</p>
</li>
<li><p>在项目根目录下新建wsgi配置文件，范例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import site</span><br><span class="line">site.addsitedir(&#39;&#x2F;home&#x2F;zzy&#x2F;xgkxflask&#x2F;venv&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#39;) # 项目的环境配置</span><br><span class="line">import sys       </span><br><span class="line">sys.path.insert(0, &#39;&#x2F;home&#x2F;zzy&#x2F;xgkxflask&#39;) # 项目根目录</span><br><span class="line">from flasky import app as application # 启动文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置apache2配置文件，默认位于 /etc/apache2/sites-available/，默认配置为000-default.conf，可自行配置，软链接到sites-enabled文件夹才会生效，范例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;VirtualHost *:80&gt; # 应用的端口</span><br><span class="line"># The ServerName directive sets the request scheme, hostname and port that</span><br><span class="line">  	# the server uses to identify itself. This is used when creating</span><br><span class="line">  	# redirection URLs. In the context of virtual hosts, the ServerName</span><br><span class="line">  	# specifies what hostname must appear in the request&#39;s Host: header to</span><br><span class="line">  	# match this virtual host. For the default virtual host (this file) this</span><br><span class="line">  	# value is not decisive as it is used as a last resort host regardless.</span><br><span class="line">  	# However, you must set it for any further virtual host explicitly.</span><br><span class="line">  	ServerName trueoctopus.com # 绑定的域名</span><br><span class="line">  </span><br><span class="line">  	ServerAdmin xgkx@hgu.edu.cn # 管理员联系方式，出错时会显示在报错内容中</span><br><span class="line">  	DocumentRoot &#x2F;home&#x2F;zzy&#x2F;xgkxflask # 网站根目录</span><br><span class="line">  	</span><br><span class="line">  	LoadModule headers_module &#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_headers.so # 跨域用mod</span><br><span class="line">          Header always set Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">          Header always set Access-Control-Allow-Methods &quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><br><span class="line">  	Header always set Access-Control-Allow-Headers &quot;authorization,content-type&quot;</span><br><span class="line">  	# 上面为跨域配置</span><br><span class="line">  </span><br><span class="line">  	WSGIDaemonProcess xgkxflask user&#x3D;zzy group&#x3D;zzy processes&#x3D;4 threads&#x3D;4 </span><br><span class="line">  	# 进程配置 用户不得为root用户，processes为进程 threads为线程</span><br><span class="line">  	WSGIScriptAlias &#x2F; &#x2F;home&#x2F;zzy&#x2F;xgkxflask&#x2F;xgkxflask.wsgi</span><br><span class="line">      	# wsgi配置文件地址，将IP:端口&#x2F;下的请求转发至项目位置</span><br><span class="line">  	WSGIPassAuthorization On # 请求头中允许authorization发送</span><br><span class="line">  </span><br><span class="line">  	&lt;Directory &#x2F;home&#x2F;zzy&#x2F;xgkxflask&gt; # 项目地址</span><br><span class="line">  	WSGIProcessGroup xgkxflask #项目名</span><br><span class="line">  	WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">  	</span><br><span class="line">  	#权限设置</span><br><span class="line">          Order allow,deny</span><br><span class="line">          Allow from all</span><br><span class="line">  	Require all granted</span><br><span class="line">  	&lt;&#x2F;Directory&gt;</span><br><span class="line">  </span><br><span class="line">  	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span><br><span class="line">  	# error, crit, alert, emerg.</span><br><span class="line">  	# It is also possible to configure the loglevel for particular</span><br><span class="line">  	# modules, e.g.</span><br><span class="line">  	#LogLevel info ssl:warn</span><br><span class="line">  	</span><br><span class="line">  	# 日志位置</span><br><span class="line">  	ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log </span><br><span class="line">  	CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line">  </span><br><span class="line">  	# For most configuration files from conf-available&#x2F;, which are</span><br><span class="line">  	# enabled or disabled at a global level, it is possible to</span><br><span class="line">  	# include a line for only one particular virtual host. For example the</span><br><span class="line">  	# following line enables the CGI configuration for this host only</span><br><span class="line">  	# after it has been globally disabled with &quot;a2disconf&quot;.</span><br><span class="line">  	#Include conf-available&#x2F;serve-cgi-bin.conf</span><br><span class="line">  &lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在ports.conf中配置端口，位于/etc/apache2下，服务器安全组需开放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">Listen 8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Flask+Apache2邮箱前端验证问题</title>
    <url>/2020/07/29/%E8%A7%A3%E5%86%B3Flask+Apache2%E9%82%AE%E7%AE%B1%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决Flask-Apache2解决邮箱前端验证问题"><a href="#解决Flask-Apache2解决邮箱前端验证问题" class="headerlink" title="解决Flask+Apache2解决邮箱前端验证问题"></a>解决Flask+Apache2解决邮箱前端验证问题</h1><br/>

<p>在apache上配置flask时可能出现如图所示的email-validator模块丢失问题 </p>
<br/>

<p><img src="https://s1.ax1x.com/2020/07/29/amMFmj.png" alt="amMFmj.png"></p>
<p>如果已经安装了这个模块但是仍然报错时，可能是由于flask与Apache模块间的兼容问题，这时需要调整以下几个模块的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flask-WTF&#x3D;&#x3D;0.14.2</span><br><span class="line">WTForms&#x3D;&#x3D;2.1</span><br><span class="line">Werkzeug&#x3D;&#x3D;0.16.0</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：此处为我配置成功的版本，不代表其他更高版本的模块不可用，可自行尝试</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache2解决中文编码问题</title>
    <url>/2020/07/29/Apache2%E8%A7%A3%E5%86%B3%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Apache2-解决utf-8编码问题"><a href="#Apache2-解决utf-8编码问题" class="headerlink" title="Apache2 解决utf-8编码问题"></a>Apache2 解决utf-8编码问题</h1><br/>

<ol>
<li><p>修改 /usr/lib/python2.7/ 下的 site.py 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site.py</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>将设置解码函数内默认的ascii编码改为utf-8即可</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def setencoding():</span><br><span class="line">    &quot;&quot;&quot;Set the string encoding used by the Unicode implementation.The</span><br><span class="line">    default is &#39;ascii&#39;, but if you&#39;re willing to experiment, you can</span><br><span class="line">    change this.&quot;&quot;&quot;</span><br><span class="line">    encoding &#x3D; &quot;utf-8&quot; # 将默认编码改成utf-8即可</span><br><span class="line">    if 0:</span><br><span class="line">        # Enable to support locale aware default string encodings.</span><br><span class="line">        import locale</span><br><span class="line">        loc &#x3D; locale.getdefaultlocale()</span><br><span class="line">        if loc[1]:</span><br><span class="line">            encoding &#x3D; loc[1]</span><br><span class="line">    if 0:</span><br><span class="line">        # Enable to switch off string to Unicode coercion and implicit</span><br><span class="line">        # Unicode to string conversion.</span><br><span class="line">        encoding &#x3D; &quot;undefined&quot;</span><br><span class="line">    if encoding !&#x3D; &quot;ascii&quot;:</span><br><span class="line">        # On Non-Unicode builds this will raise an AttributeError...</span><br><span class="line">        sys.setdefaultencoding(encoding) # Needs Python Unicode build !</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>flask</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Tensorflow-gpu</title>
    <url>/2020/03/22/Ubuntu%E5%AE%89%E8%A3%85Tensorflow-gpu/</url>
    <content><![CDATA[<div class="note default">
            <p>环境：<br>系统：Ubuntu18.04<br>GPU：GTXm1050ti<br>显卡驱动：440<br>CUDA：10.1<br>Cudnn：7.6.5<br>Tensorflow-gpu：2.1.0</p><p>Tensorflow官网：<a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">https://tensorflow.google.cn/</a></p>
          </div>

<h1 id="显卡驱动的安装"><a href="#显卡驱动的安装" class="headerlink" title="显卡驱动的安装"></a>显卡驱动的安装</h1><p>（以gtx1050ti为例）</p>
<h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><ol>
<li><p>在软件与更新中的附加驱动中直接选择版本安装，最方便但是问题很多，还有可能失败，不推荐</p>
</li>
<li><p><strong>添加ppa源安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:graphics-drivers&#x2F;ppa</span><br><span class="line"># 更新</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ubuntu-drivers devices # 显示可安装驱动版本,然后选择其中的一个版本安装</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/03/21/8hND0g.png" alt="8hND0g.png"></p>
</li>
</ol>
<p>   随后选择安装440版本的驱动</p>
<p>   <strong>注意：</strong>这里有两种安装方式，效果是一样的</p>
<p>   第一种是输入命令行，第二种是在软件与更新中的附加驱动中选择版本安装</p>
<p>   这里以第一种方式为例，第二种方式的操作类似</p>
   <br>

<p>   输入以下命令</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nvidia-driver-440</span><br></pre></td></tr></table></figure>

<p>   之后会出现如图所示的安装界面，这里让你设置安全启动的密码（需要英文加数字的形式）</p>
<p>   <img src="https://s1.ax1x.com/2020/03/21/8hNxBD.png" alt="8hNxBD.png"></p>
<p>   <img src="https://s1.ax1x.com/2020/03/21/8hUpAH.png" alt="8hUpAH.png"></p>
<p>   设置完毕后，重启电脑，将会出现如下界面</p>
<p>   <a href="https://imgchr.com/i/85toS1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/22/85toS1.jpg" alt="85toS1.jpg"></a></p>
<p>   选择第二项，Enroll MOK</p>
<p>   <img src="https://s1.ax1x.com/2020/03/22/85tWo4.jpg" alt="85tWo4.jpg"></p>
<p>   选择第二项，Continue</p>
<p>   <img src="https://s1.ax1x.com/2020/03/22/85t5WR.jpg" alt="85t5WR.jpg"></p>
<p>   选择yes，并输入你的密码，随后将会跳转回第一个界面，选择Continue boot，重启电脑</p>
<ol start="3">
<li><p><strong>使用官方下载的驱动进行安装</strong></p>
<p>过程较为复杂，这里就不演示了</p>
<p>详见：<a href="https://blog.csdn.net/u014797226/article/details/79626693" target="_blank" rel="noopener">https://blog.csdn.net/u014797226/article/details/79626693</a></p>
<p>官网：<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">http://www.nvidia.cn/Download/index.aspx?lang=cn</a></p>
<br>

<p>采用上述方法安装完成后进入系统后，输入以下命令</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure>

<p>   如果出现如图所示的界面，说明安装成功！</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hN5BF.png" alt="8hN5BF.png"></p>
<p>   <strong>注意：</strong>右上角的CUDA Version为当前驱动最高支持的CUDA版本，向下兼容，在之后安装CUDA toolkit时需要留意版本是否支持</p>
<br>

<h1 id="安装CUDA-Toolkit"><a href="#安装CUDA-Toolkit" class="headerlink" title="安装CUDA Toolkit"></a>安装CUDA Toolkit</h1><p>使用官网安装，注意版本和选项别选错，这里我选择的是10.1，试过10.2发现无法使用GPU</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUC4A.png" alt="8hUC4A.png"></p>
<p>下方有官方说明的安装方法，下载完成后，输入如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_10.1.168_418.67_linux.run # 这里填你的文件名</span><br></pre></td></tr></table></figure>

<p>稍等之后，出现如下界面</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU2UH.png" alt="8hU2UH.png"></p>
<p>输入accept，回车</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUR5d.png" alt="8hUR5d.png"></p>
<p><strong>注意：</strong>在这里用回车取消驱动选项，因为你已经装好了，使用cuda也是可以安装驱动的，但我试过</p>
<p>之后添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~&#x2F;.bashrc # 这里使用的是gedit，换成其他的也行</span><br><span class="line"># 在文件末输入，注意更改你的CUDA版本号，确保匹配</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;lib64</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;bin</span><br><span class="line">export CUDA_HOME&#x3D;$CUDA_HOME:&#x2F;usr&#x2F;local&#x2F;cuda-10.1</span><br><span class="line"># 使环境变量生效</span><br><span class="line">$ source ~&#x2F;.bashrc</span><br><span class="line"># 判断是否安装成功</span><br><span class="line">$ nvcc –version</span><br></pre></td></tr></table></figure>

<p>出现如图所示，即为安装成功</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU5xP.png" alt="8hU5xP.png"></p>
<br>

<h1 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h1><p>官网下载：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a></p>
<p>下载对应cuda版本的cudnn文件，这里我选择的是7.6.5对应cuda10.1，点击第三个进行下载</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUDv6.png" alt="8hUDv6.png"></p>
<p>下载完成后进行解压，会有一个名为cuda的文件夹，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;</span><br><span class="line">$ sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;</span><br><span class="line">$ sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h</span><br><span class="line">$ sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*</span><br></pre></td></tr></table></figure>

<p>查看cudnn版本，检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>

<p>如出现如图所示，则安装成功</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hUTr8.png" alt="8hUTr8.png"></p>
<br>

<h1 id="安装Tensorflow-gpu"><a href="#安装Tensorflow-gpu" class="headerlink" title="安装Tensorflow-gpu"></a>安装Tensorflow-gpu</h1><p>官方网址GPU支持：<a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">https://tensorflow.google.cn/install/gpu</a></p>
<p>官网有全部的安装过程，包括驱动、cuda的安装，反正我是没成功过</p>
<p>首先可以更新下pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>随后使用pip进行安装，建议在虚拟环境下安装，速度慢的可以给<a href="https://trueoctopus.top/2020/03/19/更新pip及pip换源/" target="_blank" rel="noopener">pip换源</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)$ pip install tensorflow-gpu # 默认安装最新版</span><br><span class="line">(venv)$ pip install tensorflow-gpu&#x3D;&#x3D;2.0.0 # 可选择版本安装</span><br></pre></td></tr></table></figure>

<p>检验是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3                     # 进入python3</span><br><span class="line">&gt;&gt;&gt;import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt;tf.test.is_gpu_available() # 如果显示true说明安装成功，可以使用gpu</span><br></pre></td></tr></table></figure>

<p>如图</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8hU7qS.png" alt="8hU7qS.png"></p>
<p><strong>注意：</strong>如果在引入tensorflow的时候出现一堆提示，请忽视，一般多为一些警告，不影响使用，只要最后能用就行</p>
<p>就此，大功告成，可喜可贺，可喜可贺！</p>
<br>

<h3 id="win10上的安装"><a href="#win10上的安装" class="headerlink" title="win10上的安装"></a>win10上的安装</h3><p>最后说一句，最方便的其实是，安装完驱动后，使用Anaconda3安装tensorflow-gpu，一条命令，帮你把之后所有的事情都解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base)$ conda install tensorflow-gpu</span><br></pre></td></tr></table></figure>

<p>但是，Anaconda3在我的电脑，我的Ubuntu系统中总是会崩溃，并且带崩我的整个系统，原因不知，搞崩两次了都</p>
<p>所以，这个方法建议是在win平台上搭建时使用的</p>
]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令行设置关闭盖子不休眠</title>
    <url>/2020/03/20/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%AD%E7%9B%96%E5%AD%90%E4%B8%8D%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<div class="note info">
            <p>之前使用老笔记本制作nas时，将笔记本合上后会断连，所以需要使用命令行设置关闭盖子不休眠</p>
          </div>

<br>

<p><strong>方法：</strong><br>打开文件：/etc/systemd/logind.conf，并修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#HandleLidSwitch    合上笔记本盖后的行为，suspend改为ignore（即合盖不休眠）</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 在原文件中，还要去掉前面的#来取消注释<br><br><br>在这个文件中还有一些相关的值可以修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#HandlePowerKey     按下电源键后的行为，默认power off</span><br><span class="line">#HandleSleepKey     按下挂起键后的行为，默认suspend</span><br><span class="line">#HandleHibernateKey 按下休眠键后的行为，默认hibernate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>OMV-Extras安装脚本</title>
    <url>/2020/03/20/OMV-Extras%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h2><p>一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -O - https:&#x2F;&#x2F;github.com&#x2F;OpenMediaVault-Plugin-Developers&#x2F;packages&#x2F;raw&#x2F;master&#x2F;install | bash</span><br></pre></td></tr></table></figure>
<p>二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install dirmngr</span><br><span class="line"># 下载安装包</span><br><span class="line">$ wget http:&#x2F;&#x2F;omv-extras.org&#x2F;openmediavault-omvextrasorg_latest_all4.deb</span><br><span class="line"># 安装</span><br><span class="line">$ dpkg -i openmediavault-omvextrasorg_latest_all4.deb</span><br><span class="line"># 更新</span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OMV</category>
      </categories>
      <tags>
        <tag>OMV</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>引导优先级更改</title>
    <url>/2020/03/20/%E5%BC%95%E5%AF%BC%E4%BC%98%E5%85%88%E7%BA%A7%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<h2 id="调整引导优先级方法："><a href="#调整引导优先级方法：" class="headerlink" title="调整引导优先级方法："></a>调整引导优先级方法：</h2><ol>
<li><p>开机进Bios系统，比如联想、Dell电脑F2进，不同电脑进Bios方式不同，具体需自行查阅</p>
</li>
<li><p>在Bios中进入Boot菜单</p>
</li>
<li><p>在Boot菜单下使用F5或F6调整启动优先</p>
</li>
<li><p>注意：当EFI与Legacy两种启动方式同时存在时，可在Boot Priority选项中选择两种启动方式的优先级</p>
</li>
<li><p>按F10保存并退出</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>解决electron-ssr无法使用问题</title>
    <url>/2020/03/20/%E8%A7%A3%E5%86%B3electron-ssr%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>大概是因为这个软件基于Python2，然后软连接挂了，或者是没安装python，确认安装完成后输入以下命令，重启软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果提示已存在，把原有的删去重新建一个</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows快捷键列表</title>
    <url>/2020/03/20/Windows%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="Ctrl键功能"><a href="#Ctrl键功能" class="headerlink" title="Ctrl键功能"></a>Ctrl键功能</h2><ol>
<li><p>Ctrl S 保存　</p>
</li>
<li><p>Ctrl W 关闭程序</p>
</li>
<li><p>Ctrl N 新建</p>
</li>
<li><p>Ctrl O 打开　　</p>
</li>
<li><p>Ctrl Z 撤销　　</p>
</li>
<li><p>Ctrl F 查找　　</p>
</li>
<li><p>Ctrl X 剪切　　</p>
</li>
<li><p>Ctrl C 复制　　</p>
</li>
<li><p>Ctrl V 粘贴　　</p>
</li>
<li><p>Ctrl A 全选　　</p>
</li>
<li><p>Ctrl [ 缩小文字　　</p>
</li>
<li><p>Ctrl ] 放大文字　　</p>
</li>
<li><p>Ctrl B 粗体　　</p>
</li>
<li><p>Ctrl I 斜体　　</p>
</li>
<li><p>Ctrl U 下划线　　</p>
</li>
<li><p>Ctrl Shift 输入法切换　　</p>
</li>
<li><p>Ctrl 空格 中英文切换　　</p>
</li>
<li><p>Ctrl 回车 QQ号中发送信息</p>
</li>
<li><p>Ctrl Home 光标快速移到文件头</p>
</li>
<li><p>Ctrl End 光标快速移到文件尾</p>
</li>
<li><p>Ctrl Esc 显示开始菜单　　</p>
</li>
<li><p>Ctrl Shift &lt; 快速缩小文字</p>
</li>
<li><p>Ctrl Shift &gt; 快速放大文字　　</p>
</li>
<li><p>Ctrl F5 在IE中强行刷新　　</p>
</li>
<li><p>Ctrl 拖动文件 复制文件</p>
</li>
<li><p>Ctrl Backspace 启动\关闭输入法</p>
</li>
<li><p>拖动文件时按住Ctrl Shift 创建快捷方式</p>
</li>
</ol>
<h2 id="Alt功能"><a href="#Alt功能" class="headerlink" title="Alt功能"></a>Alt功能</h2><ol>
<li><p>Alt 空格 C 关闭窗口</p>
</li>
<li><p>Alt 空格 N 最小化当前窗口</p>
</li>
<li><p>Alt 空格 R 恢复最小化窗口</p>
</li>
<li><p>Alt 空格 X 最大化当前窗口</p>
</li>
<li><p>Alt 空格 M 移动窗口</p>
</li>
<li><p>Alt 空格 S 改变窗口大小</p>
</li>
<li><p>Alt Tab 两个程序交换</p>
</li>
<li><p>Alt 255 QQ号中输入无名人</p>
</li>
<li><p>Alt F 打开文件菜单</p>
</li>
<li><p>Alt V 打开视图菜单</p>
</li>
<li><p>Alt E 打开编辑菜单</p>
</li>
<li><p>Alt I 打开插入菜单</p>
</li>
<li><p>Alt O 打开格式菜单</p>
</li>
<li><p>Alt T 打开工具菜单</p>
</li>
<li><p>Alt A 打开表格菜单</p>
</li>
<li><p>Alt W 打开窗口菜单</p>
</li>
<li><p>Alt H 打开帮助菜单</p>
</li>
<li><p>Alt 回车 查看文件属性</p>
</li>
<li><p>Alt 双击文件 查看文件属性</p>
</li>
<li><p>Alt X 关闭C语言</p>
</li>
</ol>
<h2 id="Shift快捷键"><a href="#Shift快捷键" class="headerlink" title="Shift快捷键"></a>Shift快捷键</h2><ol>
<li><p>Shift 空格 半\全角切换</p>
</li>
<li><p>Shift Delete 永久删除所选项，而不将它放到“回收站”中。　</p>
</li>
<li><p>拖动某一项时按 CTRL 复制所选项。</p>
</li>
<li><p>拖动某一项时按 CTRL SHIFT创建所选项目的快捷键。</p>
</li>
</ol>
<h2 id="winkey快捷键"><a href="#winkey快捷键" class="headerlink" title="winkey快捷键"></a>winkey快捷键</h2><ol>
<li><p>winkey D ：最小化桌面上的所有窗口，无论是聊天的窗口还是游戏的窗口</p>
</li>
<li><p>winkey I：打开windows设置</p>
</li>
<li><p>winkey E：打开文件资源管理器</p>
</li>
<li><p>winkey A：打开操作中心</p>
</li>
<li><p>winkey C：打开Cortana</p>
</li>
<li><p>winkey V：打开历史剪切板（老版本不支持）</p>
</li>
<li><p>winkey S：搜索</p>
</li>
</ol>
<h2 id="WORD全套快捷键小技巧"><a href="#WORD全套快捷键小技巧" class="headerlink" title="WORD全套快捷键小技巧　　"></a>WORD全套快捷键小技巧　　</h2><ol>
<li><p>CTRL O 打开　　</p>
</li>
<li><p>CTRL P 打印　</p>
</li>
<li><p>CTRL A 全选　　</p>
</li>
<li><p>CTRL [/] 对文字进行大小设置（在选中目标情况下）　　</p>
</li>
<li><p>CTRL D 字体设置（在选中目标情况下）　　</p>
</li>
<li><p>CTRL G/H 查找/替换;</p>
</li>
<li><p>CTRL N 全文删除;</p>
</li>
<li><p>CTRL M 左边距（在选中目标情况下）；</p>
</li>
<li><p>CTRL U 绘制下划线（在选中目标情况下）;　　</p>
</li>
<li><p>CTRL B 加粗文字（在选中目标情况下）;</p>
</li>
<li><p>CTRL I 倾斜文字（在选中目标情况下）;</p>
</li>
<li><p>CTRL Q 两边对齐（无首行缩进），（在选中目标情况下）或将光标放置目标文字的段尾，亦可操作</p>
</li>
<li><p>CTRL J 两端对齐（操作同上）</p>
</li>
<li><p>CTRL E 居中（操作同上）</p>
</li>
<li><p>CTRL R 右对齐（操作同上）</p>
</li>
<li><p>CTRL K 插入超链接</p>
</li>
<li><p>CTRL T/Y 可进行首行缩进（将光标移到需做此操作的段尾，或将此段选中进行操作</p>
</li>
<li><p>Ctrl A（或Ctrl 小键盘上数字5）：选中全文。</p>
</li>
<li><p>Ctrl B：给选中的文字加粗（再按一次，取消加粗）。</p>
</li>
<li><p>Ctrl C：将选中的文字复制到剪贴板中。</p>
</li>
<li><p>Ctrl D：打开“字体”对话框，快速完成字体的各种设置。</p>
</li>
<li><p>Ctrl E：使光标所在行的文本居中。</p>
</li>
<li><p>Ctrl F：打开“查找与替换”对话框，并定位在“查找”标签上。</p>
</li>
<li><p>Ctrl G：打开“查找与替换”对话框，并定位在“定位”标签上。</p>
</li>
<li><p>Ctrl H：打开“查找与替换”对话框，并定位在“替换”标签上。</p>
</li>
<li><p>Ctrl I：使选中的文字倾斜（再按一次，取消倾斜）。</p>
</li>
<li><p>Ctrl K：打开“插入超链接”对话框。</p>
</li>
<li><p>Ctrl Shift L：给光标所在行的文本加上“项目符号”。</p>
</li>
<li><p>Ctrl M：同时增加首行和悬挂缩进。</p>
</li>
<li><p>Ctrl Shift M：同时减少首行和悬挂缩进。</p>
</li>
<li><p>Ctrl N：新建一个空文档。</p>
</li>
<li><p>Ctrl O（或Ctrl F12）：打开“打开”对话框。</p>
</li>
<li><p>Ctrl P（或Ctrl Shift F12）：打开“打印”对话框。　　</p>
</li>
<li><p>Ctrl R：使光标所在行的文本右对齐。　　</p>
</li>
<li><p>Ctrl S：为新文档打开“另保存为”对话框，或对当前文档进行保存。</p>
</li>
<li><p>Ctrl T：增加首行缩进。</p>
</li>
<li><p>Ctrl Shift T：减少首行缩进。</p>
</li>
<li><p>Ctrl U：给选中的文字加上下划线（再按一次，去年下划线）。</p>
</li>
<li><p>Ctrl V：将剪贴板中的文本或图片粘贴到光标处。若剪贴板中有多个内容，则将 最后一条内容粘贴到光标处。</p>
</li>
<li><p>Ctrl X：将选中的文字剪切到剪贴板中。</p>
</li>
<li><p>Ctrl Z：撤销刚才进行的操作（可以多次使用）。</p>
</li>
<li><p>Ctrl 0：将选中的文本每段前增加12磅的间距。</p>
</li>
<li><p>Ctrl 1：若选中的文本行距不是“单倍行距”，则将其快速设置为“单倍行距”。</p>
</li>
<li><p>Ctrl 2： 将选中的文本行距设置为“两倍行距”。</p>
</li>
<li><p>Ctrl 5：将选中的文本行距设置为“1.5倍行距”。</p>
</li>
<li><p>Ctrl F2：快速执行“打印预览”功能。</p>
</li>
<li><p>Ctrl F4：关闭当前文档。</p>
</li>
<li><p>Ctrl F5：使窗口还原到最大化之前的状态。</p>
</li>
<li><p>Ctrl Shift F5：打开“书签”对话框。</p>
</li>
<li><p>Ctrl Shift F8：激活列选择功能，即通常所说的选择竖块文本（再按一次或按ESC键，取消该功能）。</p>
</li>
<li><p>Ctrl F9：在光标处插入一域记号“{}”（注意：直接输入的一对大括号不能作为域记号）。</p>
</li>
<li><p>Ctrl F5：使窗口还原到最大化之前的状态（再按一次，就会使窗口再次最大化）。</p>
</li>
<li><p>Ctrl Deltet：删除光标后面的一个英文单词或一个中文词语（可反复使用）。 </p>
</li>
<li><p>Ctrl Enter：将光标后面的内容快速移到下一页。</p>
</li>
<li><p>Ctrl End：快速将光标移到文末。</p>
</li>
<li><p>Ctrl Home（或Ctrl Page Up）：快速将光标移到文首。</p>
</li>
<li><p>Ctrl Insert Insert(即按两下Insert键)：快速打开或更改“任务窗格”到“剪贴板”状态。</p>
</li>
<li><p>Ctrl ：打开中文输入法的“在线造词”功能。</p>
</li>
<li><p>Ctrl ：快速切换到下标输入状态（再按一次恢复到正常状态）。</p>
</li>
<li><p>Ctrl Shift ：快速切换到上标输入状态（再按一次恢复到正常状态）。</p>
</li>
<li><p>Ctrl →：按英文单词或中文词语的间隔向后移动光标。</p>
</li>
<li><p>Ctrl ←：按英文单词或中文词语的间隔向前移动光标。</p>
</li>
<li><p>Ctrl J：文本两端对齐</p>
</li>
<li><p>Ctrl L：文本左对齐</p>
</li>
<li><p>Ctrl Q：段落重置</p>
</li>
<li><p>Ctrl W：关闭当前文档</p>
</li>
<li><p>Ctrl Y：重复上一操作（部分操作不适用）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>更新pip及pip换源</title>
    <url>/2020/03/19/%E6%9B%B4%E6%96%B0pip%E5%8F%8Apip%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<div class="note default">
            <p>运行环境：<br>    Ubuntu18.04</p>
          </div>

<h1 id="更新pip的三种方法"><a href="#更新pip的三种方法" class="headerlink" title="更新pip的三种方法"></a>更新pip的三种方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -m pip install --upgrade pip</span><br><span class="line">$ python -m pip install -U --force-reinstall pip</span><br><span class="line">$ pip install --user --upgrade pip</span><br></pre></td></tr></table></figure>
<h1 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h1><p>当使用pip安装时速度过慢可尝试使用更换为国内源的方式，但是国内源可能没有对应的安装包或没有最新的版本。<br><br></p>
<h2 id="换源的方式"><a href="#换源的方式" class="headerlink" title="换源的方式"></a>换源的方式</h2><div class="note info">
            <p>国内pip镜像源：</p><ul><li>阿里： <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a> </li><li>中国科技大学： <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a>  </li><li>豆瓣： <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a>   </li><li>清华大学： <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a>   </li><li>中国科学技术大学： <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul>
          </div>
<ol>
<li><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a><strong>临时使用</strong></h3> 例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install tensorflow -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong>-i后添加的是指定的pip源<br><br></p>
<ol start="2">
<li><h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a><strong>永久修改</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~&#x2F;.pip&#x2F;pip.conf</span><br><span class="line">修改内容如下：</span><br><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong>index-url后填写的是指定的pip源，当没有pip.conf时请自行在对应位置创建文件，这里使用的文本编辑器是gedit，目标文件不存在的话会自行创建。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>pip</tag>
      </tags>
  </entry>
</search>
